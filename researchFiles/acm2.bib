@inproceedings{10.1145/3576882.3617928,
author = {Ikeda, Bryce and Hoelscher, Janine and Alterovitz, Ron and Szafir, Daniel},
title = {Guiding the Development of Undergraduate Educational Robotics},
year = {2023},
isbn = {9798400700484},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3576882.3617928},
doi = {10.1145/3576882.3617928},
abstract = {Educational robotics, in which students program a physical robot to interact with the real world, can provide tangible active learning opportunities that are often linked to increases in student computational thinking, creativity, and motivation. To date, ER has focused on the use of robots to augment learning of adjacent fields (e.g., mathematics, programming, digital media) for K--12 students. As a result, we lack ER guidelines for: (1) supporting college robotics students learning the discipline of robotics itself and (2) college robotics students, who may possess distinct abilities and needs compared to K--12 students. To address this gap, we present a semester-long exploration of a college-levelIntroduction to Robotics course. Through student feedback, we identified three themes: (1) Positive learning opportunities, (2) Dealing with uncertainty, and (3) Successful results with simple solutions. and provide guidelines for improving ER in the context of college students learning to program and debug robots for the first time. We detail these themes and provide guidelines for improving ER in the context of college students learning to program and debug robots for the first time.},
booktitle = {Proceedings of the ACM Conference on Global Computing Education Vol 1},
pages = {71–77},
numpages = {7},
keywords = {educational robotics (ER), undergraduate introduction to robotics},
location = {Hyderabad, India},
series = {CompEd 2023}
}

@inproceedings{10.1145/3689050.3706008,
author = {Matthews, Sarah and Nicholas, Maria and Paatsch, Louise and Kervin, Lisa and Wyeth, Peta},
title = {Embeddables: Designing Physical-Digital Manipulatives for Young Children},
year = {2025},
isbn = {9798400711978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689050.3706008},
doi = {10.1145/3689050.3706008},
abstract = {Introducing digital literacy to young children develops foundational skills in problem-solving and supports their cognitive development, including critical thinking. However, physical manipulatives for digital literacy are not always designed for early-year environments or specifically for young children. Physical manipulatives can offer developmentally appropriate tools to introduce foundational digital literacy through dynamic system knowledge before children become developmentally ready for more formalised coding activities. This paper presents an initial study in a preschool environment with children (ages 3 – 5 years) using novel physical manipulatives, Embeddables (Fig. 1), in child-led free and guided play activities in a preschool. From our initial analysis of the types of activities the children engaged in, we identify how, firstly, children used the proximal relations to undertake experimental understanding of the devices, which secondly led to using the proximal relationships in their social play, further supported by the scale and feedback of the toys.},
booktitle = {Proceedings of the Nineteenth International Conference on Tangible, Embedded, and Embodied Interaction},
articleno = {69},
numpages = {7},
keywords = {Computational Thinking, Early Years, Interaction Design, Tangible},
location = {
},
series = {TEI '25}
}

@inproceedings{10.1145/3626253.3631663,
author = {White, Shana V. and Scott, Allison and Yadav, Aman and Levitt, Diane},
title = {Equitable Professional Learning for K12 Computer Science Teachers},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3631663},
doi = {10.1145/3626253.3631663},
abstract = {To address racial and gender inequality in K12 STEM and computer science education, there needs to be mutli-pronged approach. In addition to the needed work for curricula that is culturally responsive and sustaining, inclusive of all student group, and positively welcomes the identities of historically marginalized people groups, K12 computer science teachers need to be equipped with the training and tools to implement the curricula, pedagogy, and instruction to mitigate the racial and gender gaps in K12 computer science education.  To address racial and gender inequality in K12 STEM and computer science education, there needs to be a multi-pronged approach. In addition to the needed work for curricula that is culturally responsive and sustaining, inclusive of all student groups, and positively welcome the identities of historically marginalized people groups, K12 computer science teachers need to be equipped with the training and tools to implement the curriculum, pedagogy, and instruction to mitigate the racial and gender gaps in K12 computer science education. Professional learning is an oft-used medium by curriculum providers as a means for teachers to adequately use boxed computer science curricula on computer science topics and content only. The panel proposes and will share how to implement culturally responsivesustaining pedagogy within K12 teacher professional learning, the importance of the integration of culturally relevant computational thinking and computer science strategies for K12 teachers, improved understanding of instructional practices that benefit all students in the CS classroom, and equity centered instructional coaching can all greatly improve chances of decreasing racial and gender equity gaps at the K12 level for historically marginalized student groups. Much of the presentation will share current tools and programming available to K12 teachers as well as propose scalable and replicable models for use in in-service teacher education broadly, and in-service computer science and STEM teacher professional learning across the nation.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1543–1545},
numpages = {3},
keywords = {culturally-responsive computing, equity, k12 computing education, k12 prefessional development, k12 professional learning, k12 pedagogy and instructional strategies},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3545945.3569763,
author = {Charitsis, Charis and Piech, Chris and Mitchell, John C.},
title = {Detecting the Reasons for Program Decomposition in CS1 and Evaluating Their Impact},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569763},
doi = {10.1145/3545945.3569763},
abstract = {Decomposition is considered one of the four cornerstones of computational thinking, which is essential to software development [36]. It requires the ability to assess a problem at a high level, develop a strategy to combat it, and then design a solution. Our study focuses on the metacognitive aspect of decomposition. We try to understand the learner's thought process and, specifically, what makes the novice programmer decide to break down a function.Researchers have studied decomposition in introductory programming courses through guided experiments, case studies, and surveys[23,37]. In this work, we follow a different, more scalable approach. We develop an automated system to analyze 45,000 code snapshots from 168 students for a challenging CS1 programming assignment, detect the pivotal moments when they decide to decompose their programs, and identify what drives their decisions from the code. We then classify the students and study the relationship between the different categories, the code complexity, and the time to derive the final solution. We evaluate the impact of decomposition on the student's performance in the assignment and the course exams. Finally, we discuss the implications of our results for computing education.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {1014–1020},
numpages = {7},
keywords = {complexity, computing education, cs1, function decomposition, metacognition, program decomposition, student performance},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3502434.3502439,
author = {Xie, Songhua and Hu, Changkui and Wu, Wei and Fan, Lili and Xiong, Yao and Tao, Jun},
title = {Blended Practical Teaching of Object Oriented Programming Based on PBL and Task Driven},
year = {2022},
isbn = {9781450385749},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502434.3502439},
doi = {10.1145/3502434.3502439},
abstract = {According to the characteristics of equal emphasis on both theoretical knowledge and practical technology, this paper discusses the reform of experiment teaching mode in object-oriented programming course. Based on the support of the China University MOOC and PTA platform for program design experiments, a blended teaching mode combined with PBL (Problem-Based Learning), flipped classroom, task driven and online evaluation OJ (Online Judgement) is designed to explore the application of the new practice teaching mode in the course. The course is aiming to develop students' computational thinking skills, which has been proved by practice that the reform has achieved good teaching results. Correspondingly, students' ability of autonomous learning, cooperation, problem solving and creativity have been simultaneously improved.},
booktitle = {Proceedings of the 2021 5th International Conference on Education and E-Learning},
pages = {125–128},
numpages = {4},
keywords = {Blended teaching, Flipped classroom, PBL, Task driven},
location = {Virtual Event, Japan},
series = {ICEEL '21}
}

@inproceedings{10.1145/3568739.3568796,
author = {Zhou, Yujun and Zhan, Zehui and Liu, Lu and Wan, Jiayi and Liu, Simai and Zou, Xuanxuan},
title = {International Prospects and Trends of Artificial Intelligence Education: A Content Analysis of Top-level AI Curriculum across Countries},
year = {2023},
isbn = {9781450398091},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3568739.3568796},
doi = {10.1145/3568739.3568796},
abstract = {This study intends to investigate the present situation of AI curriculum offered for grades K-12. We screened 11 representative countries and areas from six continents and assessed the content of their top K-12 AI courses in terms of teaching content and teaching implementation in order to comprehend the current state of K-12 AI courses in diverse nations. Provide some ideas and suggestions for the development of AI courses for students in grades K-12. (1) Countries may choose AI applications, AI influences in various aspects, AI ethics, machine learning, data, classification, reasoning, Identify, and other content to establish independent AI teaching content standards; or choose programming as the core teaching content/starting point; or integrate programming, data, AI, and other content related to improving students' computational thinking into computer/science/technology courses. (2) Project-based learning is still the primary way of instruction, along with a range of other approaches. There are four categories of available instructional resources, and there is an abundance of them. Most countries emphasize the evaluation of students' abilities and the results achieved in the learning process.},
booktitle = {Proceedings of the 6th International Conference on Digital Technology in Education},
pages = {337–343},
numpages = {7},
location = {Hangzhou, China},
series = {ICDTE '22}
}

@inproceedings{10.1145/3502717.3532150,
author = {Spieler, Bernadette and Schifferle, Tobias M. and Dahinden, Manuela},
title = {The "Making at School" Project: Planning Interdisciplinary Activities},
year = {2022},
isbn = {9781450392006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502717.3532150},
doi = {10.1145/3502717.3532150},
abstract = {"Making" as a "do-it-yourself" and tinker mentality provides motivating and interdisciplinary ways to experiment and fosters transversal competences such as computational thinking skills. The joint innovation project "Making at School" (https://explore-making.ch; 10/2021 - 9/2023) of the Zurich University of Teacher Education (PHZH), the University of Zurich, and the CreativeLab Zurich is developing various interdisciplinary teacher training courses on Maker-Education for K12-teachers. In addition to a first basic module in spring 2022, advanced modules will be offered in autumn 2022, e.g., Digital Fabrication I (lasercutter, 3D printing) or BioTinkering. Preliminary cardboard and digital versions of a Making planning framework to support teachers in Making are already in development, evaluated, and will be improved using a design research approach together with teachers and (inter-)national experts.},
booktitle = {Proceedings of the 27th ACM Conference on on Innovation and Technology in Computer Science Education Vol. 2},
pages = {624},
numpages = {1},
keywords = {interdisciplinary teacher training, maker-education, making, steam},
location = {Dublin, Ireland},
series = {ITiCSE '22}
}

@inproceedings{10.1145/3105726.3105728,
author = {Hickmott, Daniel},
title = {Developing Teachers as Computational Participants},
year = {2017},
isbn = {9781450349680},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3105726.3105728},
doi = {10.1145/3105726.3105728},
abstract = {This document briefly explains the context, motivations, background and research design of a PhD project titled "Developing Teachers as Computational Participants". This PhD project will explore how Australian Primary School teachers learn and teach the core CS skills (computational thinking, computer programming and systems thinking), their experiences implementing lessons that impart these skills and the challenges they encounter when implementing these lessons.},
booktitle = {Proceedings of the 2017 ACM Conference on International Computing Education Research},
pages = {265–266},
numpages = {2},
keywords = {computational participation, constructionism, primary school, teacher professional development},
location = {Tacoma, Washington, USA},
series = {ICER '17}
}

@inproceedings{10.1145/3545947.3576306,
author = {Menier, Amanda and Moore, Paula and Boisvert, Deborah and Peterfreund, Alan and Sexton, Stacey and Xavier, Jeffrey and Johnston, Brianna},
title = {Intro to CS for Educators: A Pre-Curricula PD Workshop},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576306},
doi = {10.1145/3545947.3576306},
abstract = {Many K-12 educators who are new to computer science (CS) may have a lack of confidence or sense of intimidation when starting their CS teaching journey. To mitigate this, Massachusetts DESE contracted CSforMA to create a three-day "Introduction to Computer Science for Educators" workshop (ICSW) focused on CS fundamentals. The ICSW covered grade-level CS terminology and concepts including computational thinking, physical computing, and programming. Evaluation of the ICSW showed 98% of respondents reported increased knowledge of CS. In a survey administered later that summer, 100% of respondents who took the ICSW reported that it helped them better understand curriculum materials. This replicable, scalable, and successful ICSW model could benefit other State DoEs and CS professional development coordinators. This work also shows the benefits of using an external evaluator.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1362},
numpages = {1},
keywords = {education, k-12 education, professional development},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3287324.3287396,
author = {Rich, Kathryn M. and Strickland, Carla and Binkowski, T. Andrew and Franklin, Diana},
title = {A K-8 Debugging Learning Trajectory Derived from Research Literature},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287396},
doi = {10.1145/3287324.3287396},
abstract = {Curriculum development is dependent on the following question: What are the learning goals for a specific topic, and what are reasonable ways to organize and order those goals? Learning trajectories (LTs) for computational thinking (CT) topics will help to guide emerging curriculum development efforts for computer science in elementary school. This study describes the development of an LT for Debugging. We conducted a rigorous analysis of scholarly research on K-8 computer science education to extract what concepts in debugging students should and are capable of learning. The concepts were organized into the LT presented within. In this paper, we describe the three dimensions of debugging that emerged during the creation of the trajectory: (1) strategies for finding and fixing errors, (2) types of errors, and (3) the role of errors in problem solving. In doing so, we go beyond identification of specific debugging strategies to further articulate knowledge that would help students understand when to use those techniques and why they are successful. Finally, we illustrate how the Debugging LT has guided our efforts to develop an integrated mathematics and CT curriculum for grades 3-5.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {745–751},
numpages = {7},
keywords = {computational thinking, debugging, k-8, learning trajectory},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3287324.3287529,
author = {Soh, Leen-Kiat and Peteranetz, Markeya S.},
title = {Adopting, Integrating, and Evaluating Computational Creativity Exercises to Improve Student Learning},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287529},
doi = {10.1145/3287324.3287529},
abstract = {In this workshop, participants will learn how to integrate in their classes computational thinking and creative thinking activities that have been shown via rigorous research to significantly improve student learning and performance. Specifically, participants will be familiarized with the suite of Computational Creativity Exercises (non-programming-based, group-based, active learning exercises), take part in completing two of the exercises, learn how to integrate and adapt them into their courses, and be exposed to the educational research studies behind the development, design, and administration of these exercises. Participants will also learn how to conduct evidence-based, educational research studies. Workshop sessions will include presentations, panel-based Q&amp;A, breakout group discussions, and hands-on activities. More information can be found at cse.unl.edu/agents/ic2think/CCEWorkshop},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1237},
numpages = {1},
keywords = {computational creativity, computational thinking, creativity},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3290607.3298820,
author = {Kristensson, Per Ola and Banovic, Nikola and Oulasvirta, Antti and Williamson, John},
title = {Computational Interaction with Bayesian Methods},
year = {2019},
isbn = {9781450359719},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3290607.3298820},
doi = {10.1145/3290607.3298820},
abstract = {This course introduces computational methods in human--computer interaction. Computational interaction methods use computational thinking---abstraction, automation, and analysis---to explain and enhance interaction. This course introduces the theory of practice of computational interaction by teaching Bayesian methods for interaction across four wide areas of interest when designing computationally-driven user interfaces: decoding, adaptation, learning and optimization. The lectures center on hands-on Python programming interleaved with theory and practical examples grounded in problems of wide interest in human-computer interaction.},
booktitle = {Extended Abstracts of the 2019 CHI Conference on Human Factors in Computing Systems},
pages = {1–6},
numpages = {6},
keywords = {computational interaction, inference, machine learning, optimization},
location = {Glasgow, Scotland Uk},
series = {CHI EA '19}
}

@inproceedings{10.1145/3173225.3173275,
author = {Maquil, Val\'{e}rie and Moll, Christian and Schwartz, Lou and Hermen, Johannes},
title = {Kniwwelino: A Lightweight and WiFi Enabled Prototyping Platform for Children},
year = {2018},
isbn = {9781450355681},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3173225.3173275},
doi = {10.1145/3173225.3173275},
abstract = {Nowadays, computational thinking skills are considered as fundamental for our future daily life and many initiatives and tools are created to foster these skills. In this paper, we present the Kniwwelino, a new platform for prototyping physical computing projects based on WiFi. The novelty of our solution lies in the use of a WiFi chip on a small, extendable board, programmable via a block based visual programming language, making the platform compact, low-cost, WiFi enabled, and accessible to children. This paper presents the design rationale and implementation of the platform as well as two simple, example projects making use of the new WiFi-based functionalities.},
booktitle = {Proceedings of the Twelfth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {94–100},
numpages = {7},
keywords = {children., computational thinking, digital skills, physical computing, prototyping},
location = {Stockholm, Sweden},
series = {TEI '18}
}

@inproceedings{10.1145/3641555.3705275,
author = {Manesh, Daniel and Jelson, Andrew and Altland, Emily and Freeman, Jason and Lee, Sang Won},
title = {Understanding the Effects of Integrating Music Programming and Web Development in a Summer Camp for High School Students},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3705275},
doi = {10.1145/3641555.3705275},
abstract = {This poster presents the development and implementation of a 10-day remix-based summer camp curriculum designed to introduce high school students, particularly a multinational cohort of young women, to programming through creative coding. The curriculum integrates music composition using EarSketch and web development with HTML and CSS. The camp aims to inspire participants to gain self-efficacy in programming and motivate them to explore STEM/computing careers. Preliminary results from surveys and interviews indicate increased confidence in programming skills. This ongoing research explores the impact of remixing as a gateway for transitioning into more general-purpose computing domains such as web development.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1535–1536},
numpages = {2},
keywords = {computational thinking, computer science education},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3322385.3322399,
author = {Hampton, Lelia and Cummings, Robert and Gosha, Kinnis},
title = {Improving Computer Science Instruction and Computer Use for African American Secondary School Students: A Focus Group Exploration of Computer Science Identity of African American Teachers},
year = {2019},
isbn = {9781450360883},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3322385.3322399},
doi = {10.1145/3322385.3322399},
abstract = {As the demand for computing careers increases, it is important to implement strategies to broaden the participation in computer science for African Americans. Computer science courses and academic pathways are not always offered in secondary schools. Many teachers are not trained in computer science, yet are pushed to incorporate more computing, computational thinking, and computer usage. A qualitative focus group study was implemented to assess the computer science identities of African American teachers and of their respective urban secondary schools serving African American students. Three major codes were identified: district administration of computer and computing implementation, teacher attitudes towards computer science instruction, and teachers' recommendations to improve computer science and computational thinking instruction and outreach for African American secondary school students. Findings can be used to improve computer science and technology rollout programs from county and district administrations, teacher instruction with digital tools, and computer science outreach for African American secondary school students.},
booktitle = {Proceedings of the 2019 on Computers and People Research Conference},
pages = {78–84},
numpages = {7},
keywords = {computing education, computing identity, k-12 education, self-efficacy, sense of belonging, underrepresented minorities},
location = {Nashville, TN, USA},
series = {SIGMIS-CPR '19}
}

@inproceedings{10.1145/3408877.3432570,
author = {Garcia, Daniel D. and Rogers, Michael P. and Stefik, Andreas},
title = {Fun and Engaging Pre-CS1 Programming Languages},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432570},
doi = {10.1145/3408877.3432570},
abstract = {The CSforALL movement to bring computational thinking to K-12 has been a boon for practitioners and language developers. This panel features three educators passionate about a particular lan- guage that has been successful with K-12 audiences. Each will demonstrate their language, describe what makes it unique, and share some of the fun and engaging projects students have created.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {760–761},
numpages = {2},
keywords = {cs0, k-12 cs education, languages, outreach, pre-cs1},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/2787622.2787751,
author = {Van Wart, Sarah Jane},
title = {Computer Science Meets Social Studies: Embedding CS in the Study of Locally Grounded Civic Issues},
year = {2015},
isbn = {9781450336307},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2787622.2787751},
doi = {10.1145/2787622.2787751},
abstract = {Data science is an emerging 21st century literacy that promises to support learning in a wide variety of disciplines, from science, to social science, to the humanities. It also provides an engaging context in which to learn computational thinking skills in existing classroom contexts. For my dissertation research, I will explore whether and how data science can support inquiry-based learning in social studies. I conjecture that data science could provide students with an opportunity to use computational thinking to better understand their social world, while also allowing students to draw from and make sense of their own experiences. I plan to explore this idea by enhancing and evaluating a software tool, Local Ground, and creating a curriculum that helps young people identify and describe salient characteristics of their lived realities, moving from unstructured to structured data representations (e.g., photos to tags to databases). This process may generate a rich, motivating data source to explore subsequent ideas in computational thinking and social science.},
booktitle = {Proceedings of the Eleventh Annual International Conference on International Computing Education Research},
pages = {281–282},
numpages = {2},
keywords = {broadening participation, computational thinking, data science education, interdisciplinary approaches},
location = {Omaha, Nebraska, USA},
series = {ICER '15}
}

@inproceedings{10.1145/3170427.3170654,
author = {Williamson, John and Oulasvirta, Antti and Hilliges, Otmar and Kristensson, Per Ola},
title = {Computational Interaction: Theory and Practice},
year = {2018},
isbn = {9781450356213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3170427.3170654},
doi = {10.1145/3170427.3170654},
abstract = {This course introduces computational methods in human--computer interaction. Computational interaction methods use computational thinking -- abstraction, automation, and analysis -- to explain and enhance interaction. This course introduces optimization and probabilistic inference as principled methods. Lectures center on hands-on Python programming, interleaving theory and practical examples.},
booktitle = {Extended Abstracts of the 2018 CHI Conference on Human Factors in Computing Systems},
pages = {1–4},
numpages = {4},
keywords = {computational interaction, inference, machine learning, optimization},
location = {Montreal QC, Canada},
series = {CHI EA '18}
}

@inproceedings{10.1145/3649405.3659521,
author = {Wynn, Adam and Wang, Jingyun and Valente, Andrea},
title = {Simplifying Multimedia Programming for Novice Programmers: MediaLib and Its Learning Materials},
year = {2024},
isbn = {9798400706035},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649405.3659521},
doi = {10.1145/3649405.3659521},
abstract = {Beginner programmers can develop an intuitive understanding of programming by leveraging the motivating field of multimedia to visually inspect outputs and experiment with different ways to solve problems. This paper presents MediaLib, a Python library designed to facilitate multimedia programming and lessen the cognitive load associated with programming for novice programmers. In addition, we designed an official MediaLib website which contains the library itself, two tutorials, and clear documentation. The tutorial clearly presents the learning objectives of each lesson and contains exercises related to MediaLib. We designed these exercises to help students gain knowledge incrementally, without requiring in-depth maths knowledge.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 2},
pages = {785–786},
numpages = {2},
keywords = {beginners, computational thinking, library, multimedia programming, programming skills, python, teaching materials},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3605468.3609778,
author = {Bahr, Tobias},
title = {Developing a Computer Science Content Knowledge Test for 10th Grade Students},
year = {2023},
isbn = {9798400708510},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3605468.3609778},
doi = {10.1145/3605468.3609778},
abstract = {Computer Science competencies are becoming increasingly important in our current digitised society. To foster students in Computer Science, different countries have introduced subjects with new educational plans based on Computer Science frameworks, such as the K-12 CS Framework and the Informatics Reference Framework for Schools. Those include, in one way or another, four content areas: data and coding (including data structures and their applications), algorithms (involving variables, loops, and software projects), computers and networks (emphasizing the role of computers in a network and data transmission) and information society and data security (covering topics like asymmetric encryption and personal data protection). Various tests have been developed in the field of Computer Science Education for different age groups, primarily at university level for introductory Computer Science courses, and some for upper secondary school level and below, particularly for Computational Thinking. Given the research context, the objective of this study is to develop a set of items that measures the content knowledge in the four aforementioned areas. Specifically, the study focuses on the educational plan of the Computer Science subject called IMP, which is taught from the 8th to the 10th grade in secondary schools in Baden-W\"{u}rttemberg, Germany. In total, 155 items were evaluated by experts, resulting in a test consisting of 68 items. This poster abstract presents the ongoing progress of the test development.},
booktitle = {Proceedings of the 18th WiPSCE Conference on Primary and Secondary Computing Education Research},
articleno = {31},
numpages = {2},
keywords = {Competency, Computer Science, Content Knowledge, Expert Rating},
location = {Cambridge, United Kingdom},
series = {WiPSCE '23}
}

@inproceedings{10.1145/2532748.2532763,
author = {Antonitsch, Peter K. and Gigacher, Cornelia and Hanisch, Liselotte and Sabitzer, Barbara},
title = {A media-reduced approach towards informatics at primary level},
year = {2013},
isbn = {9781450324557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2532748.2532763},
doi = {10.1145/2532748.2532763},
abstract = {At the moment, informatics education stretches downward to reach primary education. This article emphasizes computational thinking, focuses upon goals of primary education and unveils how to connect to existing teaching and learning patterns when integrating computational thinking into primary education. Furthermore, a framework is sketched to combine computational thinking with computational doing in a media-reduced way.},
booktitle = {Proceedings of the 8th Workshop in Primary and Secondary Computing Education},
pages = {118–121},
numpages = {4},
keywords = {computational thinking, planning, thinking},
location = {Aarhus, Denmark},
series = {WiPSE '13}
}

@article{10.5555/3381631.3381649,
author = {Jenkins, Janet T. and Terwilliger, Mark G.},
title = {Examining strategies to improve student success in CS1},
year = {2019},
issue_date = {October 2019},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {35},
number = {4},
issn = {1937-4771},
abstract = {With the pervasiveness of the necessity of computational thinking across fields, more universities are requiring courses that build students' ability to think computationally. Computer Science 1 (CS1) is one such course where computational thinking is required This paper summarizes the work of two CS faculty who co-taught separate sections of CS1 for five semesters. Course modifications were made to augment CS1 with support inside and outside of the classroom for students to be successful. The use of in class tutors and requiring design documents were two of the primary modifications made to the course. A variety of data was collected in areas such as student planning, program design, frustration, and resources used to determine what relationships impact student success. One of the main benefits observed was an increase in the student pass rate.},
journal = {J. Comput. Sci. Coll.},
month = oct,
pages = {124–132},
numpages = {9}
}

@inproceedings{10.1145/3456887.3456925,
author = {Meng, Ji},
title = {The Understanding and Evolution of the Construction Elements of Educational Computing Experiment},
year = {2021},
isbn = {9781450389969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3456887.3456925},
doi = {10.1145/3456887.3456925},
abstract = {A unified understanding of the nature of computation-based education experiment is formed based on education experiment and computational experiment. Through a perspective analysis of the research paradigm of computation-based education experiment, the components of computation-based education experiment are identified, which are computer, network architecture, operating system, high-level programming language, intermediate data processing, external interface, and computational thinking. Their respective features are also described. The forces driving the change of these components are analyzed from two aspects: the change of educational research needs and the development of informatization. Finally, the specific changes of each component are introduced and the nature of change is summarized.},
booktitle = {2021 2nd International Conference on Computers, Information Processing and Advanced Education},
pages = {171–174},
numpages = {4},
location = {Ottawa, ON, Canada},
series = {CIPAE 2021}
}

@inproceedings{10.1145/3545945.3569738,
author = {Bockmon, Ryan and Bourke, Chris},
title = {Validation of the Placement Skill Inventory: A CS0/CS1 Placement Exam},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569738},
doi = {10.1145/3545945.3569738},
abstract = {Student success in introductory computing course continues to be a major challenge. Though there has been much research and innovation in recent years to help reduce high failure rates, a substantial population of students still struggle in a typical CS1 course. In this paper we create an argument of validity of the Placement Skills Inventory (PSIv1). The goal of the PSIv1 is to help advise and place students into an appropriate introductory computing course. While placement exams have been developed in the past, the goal of PSIv1 is to differentiate students who will be successful in a CS1 course and those that would be better served taking a CS0 course as their first computing course. In contrast, traditional placement exams have focused on differentiating students between CS1 and CS2. The PSIv1 is a combination of two instruments, the Computational Thinking Concepts and Skills Test and the Second Computer Science 1 Exam Revised Version 2. These two instruments measure students' computation thinking skills and prior programming knowledge respectively. The PSIv1 was administered to all students enrolled in either a CS0 or CS1 during the first two weeks of the semester. We use Item Response Theory to create an argument of validity of the PSIv1 and look at differences in scores on the PSIv1 based on if a student passed or failed a CS0 and CS1 course. We then used the results to create an advising strategy and criteria to help students decided if they should enroll in a CS0 or CS1 course.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {39–45},
numpages = {7},
keywords = {assessment, cs0, cs1, irt, validation},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3641555.3705048,
author = {Phelps, Victoria and Ball, Michael and Garcia, Dan and Garcia, Yuan},
title = {Snap! 10 --- From Blocks to AI: Empowering Learning with Custom Primitives and Machine Learning},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3705048},
doi = {10.1145/3641555.3705048},
abstract = {This year's Snap! 10 release marks a major leap forward, bringing advanced machine learning capabilities directly into the hands of students and educators. Version 10 introduces support for building ML models, including single-layer perceptrons, making it easier than ever for students to explore AI concepts within a block-based environment. These updates are accompanied by the ability to define Snap! primitives using Snap! blocks themselves, empowering users to deeply customize and extend the language.Building on the rich foundation of previous versions, Snap! 10 also includes hundreds of improvements aimed at enhancing both the classroom and the individual learning experience. These include quality-of-life updates such as new debugging tools, dynamic runtime access via the ''this'' reporter, and expanded support for working with dictionaries and APIs.In this demo, we'll showcase the exciting new features in Snap! 10, focusing on how they can be used to engage students in advanced topics like machine learning, data science, and computational thinking. Attendees will learn how to leverage these tools to build custom experiences that meet the evolving needs of their classrooms.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1737},
numpages = {1},
keywords = {ai, block-based programming, llm, metaprogramming, programming paradigms, snap!},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3677619.3677634,
author = {Repenning, Alexander and Grabowski, Susanne},
title = {Scaffolding Creative Programming Projects},
year = {2024},
isbn = {9798400710056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3677619.3677634},
doi = {10.1145/3677619.3677634},
abstract = {While most teachers welcome the idea of learning activities fostering creativity, it is not clear how to effectively scaffold creativity. Without suitable pedagogical approaches, it is difficult to provide appropriate levels of scaffolding. Over-scaffolding, on the one hand, while providing support appreciated especially by less experienced students, leaves little room for creative expression. Under-scaffolding, on the other hand, while fostering more authentic learning opportunities with a high potential for creativity, can lead to student frustration. The Process Artifact Creativity Landscape (PACL) is a framework that helps pre-service teachers scaffold creative projects. PACL consists of a two dimensional space providing four scaffolding approaches offering different tradeoffs between scaffolding and creativity. This paper introduces the PACL framework and outlines experiences with K–6 preservice teachers reasoning about scaffold creative programming projects.},
booktitle = {Proceedings of the 19th WiPSCE Conference on Primary and Secondary Computing Education Research},
articleno = {16},
numpages = {6},
keywords = {Computer science education, computational thinking, creativity, preservice teacher education, scaffolding},
location = {Munich, Germany},
series = {WiPSCE '24}
}

@inproceedings{10.1145/3572549.3572612,
author = {Hsu, Jih-Shih and Tsai, Wen-Lung},
title = {Influence of Grouping Strategies for Cooperative Learning on the Learning Outcome of Programming Course},
year = {2023},
isbn = {9781450397766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3572549.3572612},
doi = {10.1145/3572549.3572612},
abstract = {In recent years, programming courses has been incorporated into academic curriculums. However, as many students encounter setbacks in the learning process, this study introduces the grouping strategies for cooperation learning into programming courses, which is intended to help students improve their learning outcomes and enhance their computational thinking abilities.The subjects were 75 college students from two classes, which were divided into student-selected and heterogeneous groups, and took the experimental programming course for three weeks. The pre-test and post-test learning outcomes were validate by t-test and one-way ANOVA. This experiment aimed to understand the learning outcomes after adopting grouping strategies, as well as the learning outcomes of students with different backgrounds after adopting grouping strategies.The results showed that both student-selected grouping and heterogeneous grouping can improve the learning outcome. The learning outcome with student-selected grouping is business management background &gt; other backgrounds &gt; design background &gt; electrical engineering and computer science background. With heterogeneous grouping, the learning outcome of the design background is close to that of the electrical engineering and computer science background, and there is no significant difference among electrical engineering and computer science, business management, and other learning backgrounds. Thus, the learning outcome with heterogeneous grouping is better than that with student-selected grouping.},
booktitle = {Proceedings of the 14th International Conference on Education Technology and Computers},
pages = {393–402},
numpages = {10},
keywords = {cooperative learning, grouping strategies, programming, single-factor experiment design},
location = {Barcelona, Spain},
series = {ICETC '22}
}

@inproceedings{10.1145/3159450.3159590,
author = {Ritz, Anna},
title = {Programming the Central Dogma: An Integrated Unit on Computer Science and Molecular Biology Concepts},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159590},
doi = {10.1145/3159450.3159590},
abstract = {Much of modern biology requires quantitative and computational skills for the proper analysis of large-scale datasets, and there is a recognized need for computational training in undergraduate biology programs. This experience report describes a four-week unit designed to introduce fundamental computer science concepts and molecular biology concepts in an integrated fashion. The unit serves as the first four weeks of an introductory course taught within the Biology Department at an undergraduate institution, and is designed to introduce computational thinking to non-computational science majors. Survey results reveal that the course has attracted students from all years (first years through seniors), the majority of students have been women, and students have large self-perceived learning gains in computer science concepts. The unit shows promise for engaging non-computational students through applications in introductory molecular biology. Materials are available at http://www.reed.edu/biology/courses/bio131/resources.html.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {239–244},
numpages = {6},
keywords = {computational biology, computational thinking, introductory programming, undergraduate education},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3641554.3701946,
author = {Li, Nero and Broner, Shahar and Kim, Yubin and Mizuo, Katrina and Sauder, Elijah and To, Claire and Wang, Albert and Gila, Ofek and Shindler, Michael},
title = {Investigating the Capabilities of Generative AI in Solving Data Structures, Algorithms, and Computability Problems},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701946},
doi = {10.1145/3641554.3701946},
abstract = {There is both great hope and concern about the future of Computer Science practice and education concerning the recent advent of large language models (LLMs).We present the first study to extensively evaluate the ability of such a model to solve problems in Computer Science Theory. Specifically, we tested 165 exam-level problems across 16 specific topics related to computer science theory, ranging from preliminary data structures to algorithm design paradigms to theory of computation (automata and complexity). Our results use the recent popular models (GPT-4 and GPT-4o). This is a rapidly evolving field, with model performance continuously improving. We present our results primarily as an indication of what they can already achieve-equivalently how they can already be useful-today, fully expecting them to improve even further in the near future. Our results show that what was very recently a state-of-the-art model (GPT-4) can solve 77% of free-response problems in data structures and algorithms with little to no guidance. The latest model, GPT-4o, can solve around 46% of the Theory of Computation problems we posed, with predictable categories for which problems it could not solve. When broken down by topic, the model can solve 80% of problems in 4 out of the 15 topics and at least half in 8 other topics. Other problems, namely more visual problems, either require more substantial coaching or seem to still be beyond the capabilities of the language model--for now. By understanding the strengths and limitations of these models for solving theory problems, we can open the door to future work, ranging from human educational assessment on the topic to automated tutors for learners of the subject.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {659–665},
numpages = {7},
keywords = {algorithm design techniques, chatgpt, computational thinking, computer-assisted instruction, data structures, generative ai, gpt-4, gpt-4o, large language models},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3287324.3293765,
author = {Kite, Vance and Park, Soonhye and Wiebe, Eric},
title = {Recognizing and Questioning the CT Education Paradigm},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293765},
doi = {10.1145/3287324.3293765},
abstract = {In 1962, Thomas Kuhn changed our understanding of scientific progress through his explanation of scientific paradigms and attribution of scientific advances to paradigm shifts. According to Kuhn, a discipline's paradigm drives research, provides explanations, and directs the accumulation of discipline-specific knowledge. In 2006 and 2008 Jeanette Wing authored articles that reignited interest in computational thinking (CT) education and CT education research. Wing's articles, arguably, set in place the conceptual foundations of the paradigm currently guiding CT education and paved the way for a fruitful decade of CT education research. We are concerned, however, that the present direction of CT education and research will not support CT as an integral part of K-12 education. In its current form, CT instruction focuses almost exclusively on teaching students to program and isolates CT from disciplinary content; perpetuating the persistent misconception that programming = CT. This approach to CT education may deprive students of the opportunity to adequately develop foundational CT skills (e.g. systems thinking, abstraction and generalization, data collection and utilization, solution evaluation) and may prevent teachers from persistently and meaningfully integrating CT into their curriculum. Through this talk, we identify features of the current CT paradigm, question their alignment with Wing's ideal of "computational thinking for everyone," and propose specific recommendations for expanding the current CT paradigm.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1286},
numpages = {1},
keywords = {computational thinking, computational thinking paradigm},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3159450.3162348,
author = {Soh, Leen-Kiat and Ingraham, Elizabeth and Shell, Duane F.},
title = {Computational Creativity Exercises for Improving Student Learning and Performance: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162348},
doi = {10.1145/3159450.3162348},
abstract = {In this workshop, we will introduce you to a suite of Computational Creativity Exercises (CCEs) that have been shown to significantly improve student learning and achievement in introductory and advanced CS courses. CCEs address core aspects of computational thinking while exposing students to creative thinking skills, and can be adapted for use in your own courses. Activities such as writing a story in separate chapters and then merging the chapters to form a coherent whole, creating quilt-like patterns with written descriptions, or designing testing strategies for an alien health machine require students to apply computational thinking to unorthodox contexts and situations promoting creative application of CS knowledge and skills. CCEs are group-based, promote active learning, and are designed to foster collaborative problem solving necessary in today's workplace. They require no programming experience making them accessible to students including those with limited CS background and those with interests in non-CS disciplines, which can encourage more diverse participation in computing. Engage in a hands-on demo of a CCE and learn how to adapt CCEs for use in your classes, including technical support from the IC2Think Project team. Learn about the rigorous research studies behind the development, design and administration of these CCEs, including the instruments we used to evaluate the CCEs. Workshop session will include "how-to" presentations, panel-based Q&amp;A, breakout group discussions, and hands-on activities. Let's compute, create, and collaborate!},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1060},
numpages = {1},
keywords = {active learning, computational thinking, creative thinking},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3386201.3386213,
author = {Shaw, Fayette and Kshirsagar, Khushbu and Wendell, Kristen and Danahy, Ethan and Bernstein, Debra and Puttick, Gillian and Cassidy, Michael},
title = {Characterizing Student Artifacts in a Multi-disciplinary Biomimicry and Robotics Unit},
year = {2021},
isbn = {9781450375436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3386201.3386213},
doi = {10.1145/3386201.3386213},
abstract = {As states are adopting NGSS, engineering is increasingly being integrated in K-12 science education. While middle schools have typically segregated learning by discipline, educators are recognizing the importance of making connections across STEM disciplines. This paper presents robot artifacts built by students in an interdisciplinary middle school curriculum that combines biology, engineering, and computational thinking. In this curriculum, students analyze animals and use them as inspiration to build biomimetic robots - robots inspired by animals. We characterized and classified these artifacts based on their robots' mechanical structure and biomimetic structure and motion.},
booktitle = {Proceedings of the FabLearn 2020 - 9th Annual Conference on Maker Education},
pages = {34–39},
numpages = {6},
keywords = {Biomimicry, curriculum, educational robotics, middle school education},
location = {New York, NY, USA},
series = {FabLearn '20}
}

@inproceedings{10.1145/3649217.3653563,
author = {\v{S}v\'{a}bensk\'{y}, Valdemar and Pankiewicz, Maciej and Zhang, Jiayi and Cloude, Elizabeth B. and Baker, Ryan S. and Fouh, Eric},
title = {Comparison of Three Programming Error Measures for Explaining Variability in CS1 Grades},
year = {2024},
isbn = {9798400706004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649217.3653563},
doi = {10.1145/3649217.3653563},
abstract = {Programming courses can be challenging for first year university students, especially for those without prior coding experience. Students initially struggle with code syntax, but as more advanced topics are introduced across a semester, the difficulty in learning to program shifts to learning computational thinking (e.g., debugging strategies). This study examined the relationships between students' rate of programming errors and their grades on two exams. Using an online integrated development environment, data were collected from 280 students in a Java programming course. The course had two parts. The first focused on introductory procedural programming and culminated with exam 1, while the second part covered more complex topics and object-oriented programming and ended with exam 2. To measure students' programming abilities, 51095 code snapshots were collected from students while they completed assignments that were autograded based on unit tests. Compiler and runtime errors were extracted from the snapshots, and three measures - Error Count, Error Quotient and Repeated Error Density - were explored to identify the best measure explaining variability in exam grades. Models utilizing Error Quotient outperformed the models using the other two measures, in terms of the explained variability in grades and Bayesian Information Criterion. Compiler errors were significant predictors of exam 1 grades but not exam 2 grades; only runtime errors significantly predicted exam 2 grades. The findings indicate that leveraging Error Quotient with multiple error types (compiler and runtime) may be a better measure of students' introductory programming abilities, though still not explaining most of the observed variability.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 1},
pages = {87–93},
numpages = {7},
keywords = {computer science education, introduction to programming, introductory programming, novice programming, programming education},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3173225.3173270,
author = {Bonani, Andrea and Del Fatto, Vincenzo and Gennari, Rosella},
title = {The Evolving Design of Tangibles for Graph Algorithmic Thinking},
year = {2018},
isbn = {9781450355681},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3173225.3173270},
doi = {10.1145/3173225.3173270},
abstract = {Algorithmic thinking is at the core of computational thinking. Tangible interactive solutions can help children develop algorithmic thinking skills. This paper focusses on exploratory research concerning tangibles for graph algorithmic thinking for primary and middle schools. By following an action-research process, tangibles evolved through prototyping and actions-studies. The paper overviews their evolution and delves into its most recent action: an ecological study with 8 middle school children, and 5 primary school children, using tangibles for graph algorithmic thinking. It ends by reflecting on results and future work.},
booktitle = {Proceedings of the Twelfth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {65–72},
numpages = {8},
keywords = {action research, algorithmic thinking, children, iot, middle school., primary school, tangible design},
location = {Stockholm, Sweden},
series = {TEI '18}
}

@inproceedings{10.1145/2818314.2818328,
author = {Duncan, Caitlin and Bell, Tim},
title = {A Pilot Computer Science and Programming Course for Primary School Students},
year = {2015},
isbn = {9781450337533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818314.2818328},
doi = {10.1145/2818314.2818328},
abstract = {Computer Science and programming are being introduced to school curricula in many western countries in an effort to equip students with Computational Thinking skills. However, as these subjects are still relatively new to pre-tertiary education there is much investigation to be done into how best to present these topics and how to prepare teachers. In this study we focus on the presentation of topics relating to computing, Computational Thinking, and Computer Science for primary schools.We analyse English-language curricula that have been published, specifically the English, Australian and CSTA curricula for primary schools. From this we establish the main topics covered, and how they are positioned to be suitable for students from the first year of school to approximately their eighth year.We then report on a pilot study of a curriculum based on Computational Thinking; long term the study will encompass a range of topics and year levels, but the pilot focused on topics suitable for 11 to 12 year old students. Here we detail the design of this part of the curriculum, the manner of its delivery, and the experiences and observations of the generalist teacher who taught the course. Through assessment data, student responses to an attitude survey, and class observations we have evaluated the pilot curriculum. The findings of this study are being used to inform the design of a planned larger scale study.},
booktitle = {Proceedings of the Workshop in Primary and Secondary Computing Education},
pages = {39–48},
numpages = {10},
keywords = {Algorithms, computational thinking, curriculum, primary school, programming},
location = {London, United Kingdom},
series = {WiPSCE '15}
}

@inproceedings{10.1145/3545947.3576345,
author = {Vandenberg, Jessica and Gupta, Anisha and Smith, Andy and ElSayed, Rasha and Fox, Kimkinyona and Hubbard Cheuoua, Aleata and Minogue, James and Oliver, Kevin and Ringstaff, Cathy and Mott, Bradford},
title = {Supporting Upper Elementary Students in Multidisciplinary Block-Based Narrative Programming},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576345},
doi = {10.1145/3545947.3576345},
abstract = {Digital storytelling, which combines traditional storytelling with digital tools, has seen growing popularity as a means of creating motivating problem-solving activities in K-12 education. Though an attractive potential solution to integrating language arts skills across topic areas such as computational thinking and science, better understanding of how to structure and support these activities is needed to increase adoption by teachers. Building on prior research on block-based programming for interactive storytelling, we present initial results from a study of 28 narrative programs created by upper elementary students that were collected in both classroom and extracurricular contexts. The narrative programs are evaluated across multiple dimensions to better understand the types of narrative programs being created by the students, characteristics of the students who created the narratives, and what types of support could most benefit the students in their narrative program construction. In addition to analyzing the student-created narrative programs, we also provide recommendations for promising system-generated and instructor-led supports.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1401},
numpages = {1},
keywords = {computer science education, game-based learning, k-12 education},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3641554.3701817,
author = {Rahimi, Masoumeh and Margulieux, Lauren E. and Anderson, Erin},
title = {CS Concepts and Contextual Factors in Integrated Computing Activities in U.S. Schools},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701817},
doi = {10.1145/3641554.3701817},
abstract = {Integrated computing uses computing tools and concepts to support learning in other disciplines while giving all students opportunities to experience computer science. Integrated computing is often motivated as a way to introduce computing to students in a low-stakes environment, reducing barriers to learning computer science, often especially for underrepresented groups. This study explored integrated computing activities implemented in US schools to examine which programming and CT concepts they teach and whether those concepts differed across contexts. We gathered data on 262 integrated computing activities from in-service K-12 teachers and 20 contextual factors related to the classroom, the teacher, and the school. Our analysis revealed that programming and CT concepts were inversely related to five contextual factors, such that factors predicting more CT concepts also predicted fewer programming concepts. These factors reflected school resources, such that wealthier schools used activities with more CT concepts and fewer programming concepts. In addition, factors related to underrepresented groups often related to fewer concepts being taught in activities. School racial composition was the only factor of the 20 that had a relationship with both types of concepts in the same direction-students from underrepresented groups used activities with fewer CT and programming concepts. Our findings suggest that, although integrated computing can potentially introduce computing to a broader audience, we must evaluate what these activities are teaching and to whom. Another primary contribution of this work is an open-access dataset about integrated computing activities, the concepts that they teach, and the contextual factors around their use.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {931–937},
numpages = {7},
keywords = {computational thinking, computing integration, cs+x, integrated computing, k-12 computer science education, survey},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3626253.3635495,
author = {Adrion, W. Richards and Pekta\c{s}, Emrah},
title = {Evolution of an Integrated, Elementary CSforAll Curriculum},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635495},
doi = {10.1145/3626253.3635495},
abstract = {A research-practice partnership (RPP) used a teacher co-design process, supported by equity-focused professional development, to create an elementary-level curriculum that integrates content, practices, and learning progressions from state computing standards with other standards-based curricula. Most district students are part of historically marginalized groups and the RPP chose to develop an equity and inclusion-focused curriculum that would be taught in all elementary classrooms to all students. Twelve teacher teams, supported by researchers and ELL and SPED specialists, designed, piloted, and documented 23 modules of 4-8, 45-minute lessons across K-5. Early adopter teachers followed the pilots and implemented the modules in their classrooms with the goal of facilitating adoption by all elementary classroom teachers. After being interrupted by the pandemic, the RPP developed a strategy where principals in cohorts of schools agreed to collaborate with RPP school-based lead teachers to establish professional learning communities (PLCs) to support classroom implementation of the modules. Eleven schools participated in a 2021-22 cohort and nine more schools joined in 2022-23. Centering equity, PLCs, and quality module documentation and materials are key to sustaining and evolving the CSforAll curriculum. The modules were revised based on feedback obtained from ELL and SPED specialists, early adopters, teacher coordinators, researchers, and district curriculum directors. Using a large data set of meeting and classroom observation records, interviews, field notes, focus groups, surveys, and module documentation, we track the evolution of the curriculum and provide a detailed analysis of one module as an example.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1548–1549},
numpages = {2},
keywords = {computational thinking, k-5 computer science education, research-practice partnership, teacher preparation},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@article{10.1145/3656408,
author = {Zakhour, George and Weisenburger, Pascal and Salvaneschi, Guido},
title = {Automated Verification of Fundamental Algebraic Laws},
year = {2024},
issue_date = {June 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {PLDI},
url = {https://doi.org/10.1145/3656408},
doi = {10.1145/3656408},
abstract = {Algebraic laws of functions in mathematics – such as commutativity, associativity, and idempotence – are often used as the basis to derive more sophisticated properties of complex mathematical structures and are heavily used in abstract computational thinking. Algebraic laws of functions in coding, however, are rarely considered. Yet, they are essential. For example, commutativity and associativity are crucial to ensure correctness of a variety of software systems in numerous domains, such as compiler optimization, big data processing, data flow processing, machine learning or distributed algorithms and data structures. Still, most programming languages lack built-in mechanisms to enforce and verify that operations adhere to such properties. In this paper, we propose a verifier specialized on a set of fundamental algebraic laws that ensures that such laws hold in application code. The verifier can conjecture auxiliary properties and can reason about both equalities and inequalities of expressions, which is crucial to prove a given property when other competitors do not succeed. We implement these ideas in the Propel verifier. Our evaluation against five state-of-the-art verifiers on a total of 142 instances of algebraic properties shows that Propel is able to automatically deduce algebraic properties in different domains that rely on such properties for correctness, even in cases where competitors fail to verify the same properties or time out.},
journal = {Proc. ACM Program. Lang.},
month = jun,
articleno = {178},
numpages = {24},
keywords = {Algebraic Properties, Type Systems, Verification}
}

@inproceedings{10.1145/2899415.2899435,
author = {Park, Thomas H. and Kim, Meen Chul and Chhabra, Sukrit and Lee, Brian and Forte, Andrea},
title = {Reading Hierarchies in Code: Assessment of a Basic Computational Skill},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2899435},
doi = {10.1145/2899415.2899435},
abstract = {One of the skills that comprise computational thinking is the ability to read code and reason about the hierarchical relationships between different blocks, expressions, elements, or other types of nodes, depending on the language. In this study, we present three new instruments for assessing different aspects of reading hierarchies in code, including vocabulary, reasoning, and fluency. One of these instruments is Nester, an interactive tool we have designed to elicit mental models about the hierarchical structure of code in computing languages ranging from HTML, CSS, and LaTeX to JavaScript and Lisp. We describe a lab study in which we administered these instruments to 24 participants with varying degrees of web development experience. We report findings from this study, including participants' ability to define, reason about, and manipulate hierarchies in code, and the errors and misconceptions that relate to them. Finally, we discuss avenues for future work.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {302–307},
numpages = {6},
keywords = {assessment, computational thinking, program comprehension, web development},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

@inproceedings{10.1145/3287324.3287353,
author = {Salac, Jean and White, Max and Wang, Ashley and Franklin, Diana},
title = {An Analysis through an Equity Lens of the Implementation of Computer Science in K-8 Classrooms in a Large, Urban School District},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287353},
doi = {10.1145/3287324.3287353},
abstract = {Major metropolitan school districts around the United States are implementing computer science in elementary school classrooms as part of the CS for All (CS4All) initiative. Little is known, however, about the success of such a large-scale rollout, especially in terms of equity. In this study we analyze the performance of 4th grade classrooms completing three modules of an introductory computational thinking curriculum, looking at not only overall results but also the variance in performance between high-, mid-, and low-performing schools (as identified by their school report cards). We find that all classrooms are benefiting from the computational thinking (CT) curriculum, making great strides in providing equitable access to CT education. However, statistically-significant differences in performance are present, especially between the high- and low-performing schools, showing that there is still room for improvement in developing strategies and curricula for struggling learners.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1150–1156},
numpages = {7},
keywords = {diversity, k-8 education, scratch},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3450337.3483472,
author = {Higashi, Ross and Harpstead, Erik and Solyst, Jaemarie and Kemper, Jonaya and Odili Uchidiuno, Judith and Hammer, Jessica},
title = {The Design of Co-Robotic Games for Computer Science Education},
year = {2021},
isbn = {9781450383561},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3450337.3483472},
doi = {10.1145/3450337.3483472},
abstract = {Digital games featuring programmable agents are popular tools for teaching coding and computational thinking skills. However, today's games perpetuate an arguably obsolete relationship between programmable agents and human operators. Borrowing from the field of human-robotics interaction, we argue that collaborative robots, or cobots, are a better model for thinking about computational agents, working directly with humans rather than in place of or at arm's length from them. In this paper, we describe an initial design inquiry into the design of “cobot games”, programmable agent scenarios in which players program an in-game ally to assist them in accomplishing gameplay objectives. We detail three questions that emerged out of this exploration, our present thinking on them, and plans for deepening inquiry into cobot game design moving forward.},
booktitle = {Extended Abstracts of the 2021 Annual Symposium on Computer-Human Interaction in Play},
pages = {111–116},
numpages = {6},
keywords = {Co-robotic games, Cobots, Games-based learning, Robotics education},
location = {Virtual Event, Austria},
series = {CHI PLAY '21}
}

@inproceedings{10.1145/3372782.3407114,
author = {Shaw, Mia S.},
title = {Restorying through Computational Quilts: A Critical Approach Towards Reimagining Computer Science},
year = {2020},
isbn = {9781450370929},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372782.3407114},
doi = {10.1145/3372782.3407114},
abstract = {While much attention has focused on promoting computational thinking in K-12 CS education, much less attention has been paid to the equally significant dimension of what it means to identify with the discipline. Previous approaches to CS identity have mostly focused on getting students to reveal their identifications in the form of drawings or survey responses, while more recent approaches have started to examine narratives in a field that historically has marginalized women and students of color. My dissertation seeks to broaden participation in computing by creating access for groups who have historically and structurally been excluded from CS. While learning computational skills and designing interactive paper quilts, high school students of color will draw upon their lived experiences to reimagine new connections and stories about CS. Using video observations and field notes, students' reflective worksheets and artifacts, and student interviews, I will explore what happens when youth of color use CS skills and digital technologies to "restory" their CS identities, the kinds of metanarratives about CS and computer scientists youth identify, and what the process of restorying looks like in practice.},
booktitle = {Proceedings of the 2020 ACM Conference on International Computing Education Research},
pages = {344–345},
numpages = {2},
keywords = {computer science, counter-narratives, equity, identity},
location = {Virtual Event, New Zealand},
series = {ICER '20}
}

@inproceedings{10.1145/3626253.3635336,
author = {Popov, Aleksandr},
title = {Simulating Election Votes},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635336},
doi = {10.1145/3626253.3635336},
abstract = {CS0 and CS1 courses are becoming an essential part of many social science programs, including sociology and political science. This particular assignment was designed as part of the 'Basics of Programming in Python' course for undergraduate political science students. The course aims not only to prepare students for the unified programming exam, but also to apply concepts of computational thinking in the context of political science problems. By linking these fields, students learn to overcome inner barriers in coding and explore the potential of computational social science methods for both academic path and career.  This project seeks such a connection between subjects of political science major as Comparative Electoral Systems and Quantitative Methods of Political Research, and concepts of computer science. Students process the generated votes, applying critical thinking to identify spoilt ballots, and then formulate rules for counting votes (First-past-the-post, Borda count, Condorcet winner criterion) in algorithmic form. Optionally, a short essay can be added in which students are asked to speculate about political leanings, the transitivity of preferences and the advantages/disadvantages of particular electoral systems based on analyses of the data in the assignment. As the result, students not only develop hard skills in programming, but most importantly conceptualize complicated topics through the prism of their specialization, fostering the ability to see the connections between these fields and understand how they can work together to address complex real-world scenarios.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1915},
numpages = {1},
keywords = {computational social science, teaching computational thinking},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3466725.3466737,
author = {Lemonica Rosa, Rodrigo},
title = {Social Necklace Project: A student-made gadget to help people during the COVID19 pandemic},
year = {2021},
isbn = {9781450389891},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3466725.3466737},
doi = {10.1145/3466725.3466737},
abstract = {This paper presents the Y9 (9th-grade level) project from Beacon School, S\~{a}o Paulo - Brazil, entitled Social Necklace. The main scope was to bring for students’ maker learning, programming literacy, and computational thinking. Through hands-on activities, all students could think, experiment, create, and learn. Fundamental premises to transform them into producers instead of simple technology consumers. During classes, the STEAM and PBL (Project Based Learning) approaches were the basis, which allowed students to choose the theme COVID-19, the driving question: Can technology contribute to helping in the control and prevention of pandemics? And coding and setting a gadget using the BBC Micro:bit, as an answer to the question. The work carried out with the students enabled many dialogues between the different fields of knowledge. Through maker education, it was possible to engage students in learning activities very distinct from traditional education.},
booktitle = {FabLearn Europe / MakeEd 2021 - An International Conference on Computing, Design and Making in Education},
articleno = {12},
numpages = {5},
keywords = {Programming Literacy, Social Necklace Project, bit},
location = {St. Gallen, Switzerland},
series = {FabLearn Europe / MakeEd 2021}
}

@inproceedings{10.1145/3328778.3366902,
author = {Liesaputra, Veronica and Ramirez-Prado, Guillermo and Barmada, Bashar and Song, Lei},
title = {Future-Proofing Kiwi Kids Through the Use of Digital Technology},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366902},
doi = {10.1145/3328778.3366902},
abstract = {The common approach for introducing middle school and high school students to computational thinking and engineering is through programming or robotics activities that were designed without much social context. Therefore, one of the challenges such outreach programs pose is further stereotyping of students who are interested in computer science, by presenting them as people who ought to be hyper-intelligent and very much focused on computers with no social skills. Realizing the above, and wanting to attract a diverse audience to study computer science, we developed a one-day workshop which showcases the interdisciplinary nature of computer science and the various ways computing can help students discover and solve societal problems. We chose multiculturalism, cyber security and air pollution as the context of our computational thinking activities. This paper describes our experiences in developing and teaching the workshops that runs three to five times a year, hosted either in our institute or at local schools. Regardless of students' previous STEM experiences and socioeconomic statuses, both students and teachers reported that the knowledge gained enabled them to either create a computer program or a robot and also led to a better understanding of how computers can be used in daily life. In other words, the workshop successfully opened the minds and perspectives of the middle school and high school students on computer science. Additionally, over time, we also observed an increased number of students and schools participating in such workshops.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {507–513},
numpages = {7},
keywords = {air pollution, cyber security, introduction to computer science, k-12 education, middle school, multiculturalism, outreach, raspberry pi, social good},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3287324.3293757,
author = {Biswas, Gautam and Hutchins, Nicole and L\'{e}deczi, \'{A}kos and Grover, Shuchi and Basu, Satabdi},
title = {Integrating Computational Modeling in K-12 STEM Classrooms},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293757},
doi = {10.1145/3287324.3293757},
abstract = {C2STEM is a web-based learning environment founded on a novel paradigm that combines block-structured, visual programming with the concept of domain specific modeling languages (DSMLs) to promote the synergistic learning of discipline-specific and computational thinking (CT) concepts and practices. Our design-based, collaborative learning environment aims to provide students in K-12 classrooms with immersive experiences in CT through computational modeling in realistic scenarios (e.g., building models of scientific phenomena). The goal is to increase student engagement and include inclusive opportunities for developing key computational skills needed for the 21st century workforce. Research implementations that include a semester-long high school physics classroom study have demonstrated the effectiveness of our approach in supporting synergistic learning of STEM and CS/CT concepts and practices, especially when compared to a traditional classroom approach. This technology demonstration will showcase our CS+X (X = physics, marine biology, or earth science) learning environment and associated curricula. Participants can engage in our design process and learn how to develop curricular modules that cover STEM and CS/CT concepts and practices. Our work is supported by an NSF STEM+C grant and involves a multi-institutional team comprising Vanderbilt University, SRI International, Looking Glass Ventures, Stanford University, Salem State University, and ETR. More information, including example computational modeling tasks, can be found at C2STEM.org.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1288},
numpages = {1},
keywords = {computational thinking, cs+x, k12, modeling},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3649217.3653586,
author = {Pozzan, Gabriele and Padova, Costanza and Montuori, Chiara and Arf\'{e}, Barbara and Vardanega, Tullio},
title = {Experimental Analysis of First-Grade Students' Block-Based Programming Problem Solving Processes},
year = {2024},
isbn = {9798400706004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649217.3653586},
doi = {10.1145/3649217.3653586},
abstract = {This work presents an experimental analysis of first-grade students' block-based programming trajectories. These trajectories consist of edit-level program snapshots that capture learners' problem-solving processes in a navigational microworld. Our results highlight the potential of this fine-grained data capture. Snapshot frequencies in trajectories collected before and after a coding intervention showcase the collective progress of the learners. Graph visualizations, in which nodes represent snapshots and directed edges code edits, highlight strategies, pitfalls and debugging procedures. Individual programming trajectories shed light on details of learners' problem-solving processes that less granular analysis would conceal. Various works in the field of Learning Analytics research show the usefulness of collecting fine-grained process data that proceed from programming activities. However, how to analyze this data is still an open question and research on the subject is in an experimental phase. We contribute to this experimentation by analyzing and discussing results collected from 30 first-grade students in a pretest-posttest study.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 1},
pages = {143–149},
numpages = {7},
keywords = {block-based programming, computational thinking, learning analytics, programming trajectories},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3486011.3486418,
author = {Lozano-Arias, Jes\'{u}s and Rodr\'{\i}guez-Sedano, Francisco J. and Gonz\'{a}lez-Alonso, Mar\'{\i}a-Inmaculada and Conde, Miguel \'{A}ngel},
title = {Using Educational Robotic Exoskeleton for the Acquisition of Cross-Curricular Competences in Higher Education},
year = {2021},
isbn = {9781450390668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3486011.3486418},
doi = {10.1145/3486011.3486418},
abstract = {Today, Spanish universities are already adapted to the Common European Higher Education Area, which is based on the acquisition of competences by the student. Nevertheless, while the acquisition of specific competences is well assumed by the different subjects of each degree, the same is not true for cross-curricular competences. More specifically, in most engineering studies, these competences are developed indirectly through elective subjects or other complementary training activities. The main objective of this work is to design a prototype of a low-cost and open-access exoskeleton that can be used in different engineering degrees for the acquisition of cross-curricular competences. Once this prototype has been designed, we propose to use it in a practice to be carried out in the laboratory following the project-based learning methodology from a STEAM approach. With the use of a robotics kit and a project-based learning methodology, we achieve the goals of educational robotics and computational thinking in a higher education environment.},
booktitle = {Ninth International Conference on Technological Ecosystems for Enhancing Multiculturality (TEEM'21)},
pages = {51–57},
numpages = {7},
keywords = {Cross-curricular competences, STEAM education, engineering education, exoskeleton},
location = {Barcelona, Spain},
series = {TEEM'21}
}

@inproceedings{10.1145/3545945.3569823,
author = {Denny, Paul and Kumar, Viraj and Giacaman, Nasser},
title = {Conversing with Copilot: Exploring Prompt Engineering for Solving CS1 Problems Using Natural Language},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569823},
doi = {10.1145/3545945.3569823},
abstract = {GitHub Copilot is an artificial intelligence tool for automatically generating source code from natural language problem descriptions. Since June 2022, Copilot has officially been available for free to all students as a plug-in to development environments like Visual Studio Code. Prior work exploring OpenAI Codex, the underlying model that powers Copilot, has shown it performs well on typical CS1 problems thus raising concerns about its potential impact on how introductory programming courses are taught. However, little is known about the types of problems for which Copilot does not perform well, or about the natural language interactions that a student might have with Copilot when resolving errors. We explore these questions by evaluating the performance of Copilot on a publicly available dataset of 166 programming problems. We find that it successfully solves around half of these problems on its very first attempt, and that it solves 60% of the remaining problems using only natural language changes to the problem description. We argue that this type of prompt engineering, which we believe will become a standard interaction between human and Copilot when it initially fails, is a potentially useful learning activity that promotes computational thinking skills, and is likely to change the nature of code writing skill development.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {1136–1142},
numpages = {7},
keywords = {artificial intelligence, cs1, foundation models, github copilot, introductory programming, large language models, openai},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/2818314.2818338,
author = {Moreno-Le\'{o}n, Jes\'{u}s and Robles, Gregorio},
title = {Dr. Scratch: a Web Tool to Automatically Evaluate Scratch Projects},
year = {2015},
isbn = {9781450337533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818314.2818338},
doi = {10.1145/2818314.2818338},
abstract = {This poster paper presents the operation and the new features of Dr. Scratch, an award-winning gamified web application that allows to perform automatic analysis of Scratch projects to assess the development of computational thinking and detect some bad programming habits that are common in students learning to program in this environment.},
booktitle = {Proceedings of the Workshop in Primary and Secondary Computing Education},
pages = {132–133},
numpages = {2},
keywords = {Assessment, Scratch, coding, computational thinking, learning},
location = {London, United Kingdom},
series = {WiPSCE '15}
}

@inproceedings{10.1145/3291279.3341203,
author = {Guerzhoy, Michael},
title = {Introduction to Data Science as a Pathway to Further Study in Computing},
year = {2019},
isbn = {9781450361859},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291279.3341203},
doi = {10.1145/3291279.3341203},
abstract = {Several institutions have recently introduced Introduction to Data Science courses that involve a substantial programming component and do not require CS1 as a prerequisite. Programming and computational thinking are central to the emerging discipline of data science, and so there is overlap between traditional CS1 courses and Introduction to DS.Partly because of the evident societal significance of data science and because data science does not have the problematic reputation of computer science, Intro to DS can attract new and diverse audiences that may not have been interested in taking CS1.We explore Intro to DS as a possible alternative path into computing: what are the learning goals in Intro to DS that involve programming and/or computational thinking? How generalizable are the problems students solve in Intro to DS to what students would encounter in future studies? Is it feasible for students to pursue a data science sequence rather than CS1-CS2 and be prepared for a career that uses data science? To what extent can a pathway through a data science sequence diversify the population of students who graduate from degree programs in computer science and data science?We survey the Introduction to Data Science courses offered in North American post-secondary education, and focus on a data science sequence that uses the R programming language and does not require CS1 at an R1 institution as a case study.},
booktitle = {Proceedings of the 2019 ACM Conference on International Computing Education Research},
pages = {303},
numpages = {1},
keywords = {cs1, data science, diversity, women in computer science},
location = {Toronto ON, Canada},
series = {ICER '19}
}

@inproceedings{10.1145/3287324.3293715,
author = {Nche, Olivia},
title = {Engaging African American Elementary School Children in Code Understanding},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293715},
doi = {10.1145/3287324.3293715},
abstract = {This paper summarizes the results of a research project to broaden access to computing. The project is aimed at improving the attitudes and computational thinking skills for African American elementary school children in the 3rd to 5th grades and to understand their difficulties in reasoning about code. This was done within the context of a five-week summer camp. There were 40 children of whom about half were females. Along with instruction, we used a custom video game to teach code tracing. We used video game data and pre and posttests to assess students' performance. Qualitative and quantitative results from our mixed method design show cognitive and affective improvements as well as improvements in computational thinking skills. The data we collected also highlighted potential common mistakes that elementary school children might make as they attempt to reason about code. It shows the potential in games to motivate code understanding practice and improve learning. SIGCSE '19, February 27-March 2, 2019, Minneapolis, MN, USA © 2019 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-5890-3/19/02. https://doi.org/10.1145/3287324.3293715},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1296},
numpages = {1},
keywords = {broadening participation, code tracing, computational thinking, integrative approach, problem solving, video game},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2978249.2978272,
author = {Waite, Jane and Curzon, Paul and Marsh, William and Sentance, Sue},
title = {Abstraction and common classroom activities},
year = {2016},
isbn = {9781450342230},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2978249.2978272},
doi = {10.1145/2978249.2978272},
abstract = {In popularizing computational thinking, Wing notes that 'abstraction is described as underlying computational thinking and computational thinking is described as fundamental to computing.' Emerging curricular now require educators to incorporate computational thinking and abstraction into their teaching. Many refer to Piaget's work as evidence of an age-related ceiling preventing younger pupils from being able to abstract. However, more recent evidence suggests that pupils use elements of abstraction in their general process of learning, and that the skill of abstraction can be explicitly taught. We draw on personal classroom experience to illustrate the points made in the literature. Common classroom activities such as using labelled diagrams, concept maps and storyboards are aligned to features of abstraction. We argue that abstraction can and should be taught to young pupils.},
booktitle = {Proceedings of the 11th Workshop in Primary and Secondary Computing Education},
pages = {112–113},
numpages = {2},
keywords = {Abstraction, design, graph, storyboard, visualisation},
location = {M\"{u}nster, Germany},
series = {WiPSCE '16}
}

@inproceedings{10.1145/3488042.3488048,
author = {Greifenstein, Luisa and Gra\ss{}l, Isabella and Fraser, Gordon},
title = {Challenging but Full of Opportunities: Teachers’ Perspectives on Programming in Primary Schools},
year = {2021},
isbn = {9781450384889},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3488042.3488048},
doi = {10.1145/3488042.3488048},
abstract = {The widespread establishment of computational thinking in school curricula requires teachers to introduce children to programming already at primary school level. As this is a recent development, primary school teachers may neither be adequately prepared for how to best teach programming, nor may they be fully aware why they have to do so. In order to gain a better understanding of these questions, we contrast insights taken from practical experiences with the anticipations of teachers in training. By surveying 200&nbsp;teachers who have taught programming at primary schools and 97&nbsp;teachers in training, we identify relevant challenges when teaching programming, opportunities that arise when children learn programming, and strategies how to address both of these in practice. While many challenges and opportunities are correctly anticipated, we find several disagreements that can inform revisions of the curricula in teaching studies to better prepare primary school teachers for teaching programming at primary schools.},
booktitle = {Proceedings of the 21st Koli Calling International Conference on Computing Education Research},
articleno = {10},
numpages = {10},
keywords = {Programming education, primary school, teacher survey.},
location = {Joensuu, Finland},
series = {Koli Calling '21}
}

@inproceedings{10.1145/3502718.3524771,
author = {Nugent, Gwen and Chen, Keting and Soh, Leen-Kiat and Choi, Dongho and Trainin, Guy and Smith, Wendy},
title = {Developing K-8 Computer Science Teachers' Content Knowledge, Self-efficacy, and Attitudes through Evidence-based Professional Development},
year = {2022},
isbn = {9781450392013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502718.3524771},
doi = {10.1145/3502718.3524771},
abstract = {Broadening participation in computer science (CS) for primary/elementary students is a growing movement, spurred by computing workforce demands and the need for younger students to develop skills in problem solving and critical/computational thinking. However, offering computer science instruction at this level is directly related to the availability of teachers prepared to teach the subject. Unfortunately, there are relatively few primary/elementary school teachers who have received formal training in computer science, and they often self-report a lack of CS subject matter expertise. Teacher development is a key factor to address these issues, and this paper describes professional development strategies and empirical impacts of a summer institute that included two graduate courses and a series of Saturday workshops during the subsequent academic year. Key elements included teaching a high-level programing language (Python and JavaScript), integrating CS content and pedagogy instruction, and involving both experienced K-12 CS teachers and University faculty as instructors. Empirical results showed that this carefully structured PD that incorporated evidence-based elements of sufficient duration, teacher active learning and collaboration, modeling, practice, and feedback can successfully impact teacher outcomes. Results showed significant gains in teacher CS knowledge (both pedagogy and content), self-efficacy, and perception of CS value. Moderating results -- examining possible differential effects depending on teacher gender, years of teaching CS, and geographic locale -- showed that the PD was successful with experienced and less experienced teachers, with teachers from both rural and urban locales, and with both males and females.},
booktitle = {Proceedings of the 27th ACM Conference on on Innovation and Technology in Computer Science Education Vol. 1},
pages = {540–546},
numpages = {7},
keywords = {k-8 education, research, teacher professional development},
location = {Dublin, Ireland},
series = {ITiCSE '22}
}

@inproceedings{10.1145/3456565.3460074,
author = {H\"{o}rmann, Corinna and Rottenhofer, Marina and Groher, Iris and Sabitzer, Barbara},
title = {Let the Games Begin - Inviting Young Learners to Code},
year = {2021},
isbn = {9781450383974},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3456565.3460074},
doi = {10.1145/3456565.3460074},
abstract = {No matter whether young or old, almost everyone likes to play games. Even though digital games have the opportunity to motivate students and foster digital skills, games in an educational context are typically described as a minor matter in class. However, games can provide an environment to work intensively on and consolidate topics from the classroom. Especially if students have the task of developing a game themselves, it is necessary to work on the topic in depth while the content is learned and anchored playfully. As part of the COOL Informatics project, which had the goal of spreading digital education and programming in the educational sector, a Game Design Challenge was launched. In this challenge, pupils, and teachers from all over Austria were invited to develop their own educational games. It is planned to relaunch the Game Design Challenge in 2021 with the goal that more and more students can be introduced to the basics of Computational Thinking.},
booktitle = {Proceedings of the 26th ACM Conference on Innovation and Technology in Computer Science Education V. 2},
pages = {644},
numpages = {1},
keywords = {digital education, game design, programming, stem},
location = {Virtual Event, Germany},
series = {ITiCSE '21}
}

@inproceedings{10.1145/3408877.3432495,
author = {Rentz, Zach and Clements, John and Wood, Zo\"{e} and Keen, Aaron},
title = {Before You Write Code ... Putting Data and Ethics at the Center of Introductory Computing},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432495},
doi = {10.1145/3408877.3432495},
abstract = {Computing is a large and growing presence in society in 2020, and like many others, we see a strong demand from non-computing majors for "CS For All" courses. Unlike many others, we do not feel that putting traditional programming first is the best way to do this. Instead, we are rethinking the way we introduce computing to allow a broad audience to engage with this discipline.Any computational problem we might tackle requires that we explicitly think about the data involved to solve the problem. Likewise, many computational problems potentially have deep implications for the effect of emerging technologies on society including complex racial and social justice issues. When training novice computer scientists, too often the focus is on learning to write code, but not on explicitly learning computational thinking (data-first, declarative) and how to spot, analyze, and mitigate the ethical implications of potential computing solutions. When teaching those from other disciplines about computer science, the importance of learning to write code is diminished still further, relative to skills in computational thinking and in reasoning about ethical issues in computing and emerging technologies.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1353},
numpages = {1},
keywords = {CS4all, data-first, declarative, ethics, introduction to computational thinking},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3421590.3421624,
author = {Catet\'{e}, Veronica and Lytle, Nicholas and Boulden, Danielle and Hinckle, Madeline and Wiebe, Eric and Barnes, Tiffany},
title = {A block-based modeling curriculum for teaching middle grade science students about Covid-19},
year = {2020},
isbn = {9781450387590},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3421590.3421624},
doi = {10.1145/3421590.3421624},
abstract = {While the scientific community is learning more about the novel Coronavirus and its associate disease, Covid-19, it is important to begin efforts to educate students on the disease, how it is transmitted, and the possible steps we as societies and individuals can take to combat the spread. To this end, we adapted an existing computational thinking curriculum originally designed to teach students about how infectious diseases are spread by having them build a model within the block-based programming environment, Cellular. This new curriculum introduces relevant scientific terms and tasks student to program an increasingly complex model ending the activity by choosing which risk-reduction strategy to employ.},
booktitle = {Proceedings of the 15th Workshop on Primary and Secondary Computing Education},
articleno = {36},
numpages = {2},
location = {Virtual Event, Germany},
series = {WiPSCE '20}
}

@inproceedings{10.1145/3459990.3465210,
author = {Stower, Rebecca and Kappas, Arvid},
title = {CozmoNAOts: Designing an Autonomous Learning Task with Social and Educational Robots},
year = {2021},
isbn = {9781450384520},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3459990.3465210},
doi = {10.1145/3459990.3465210},
abstract = {Learning tasks designed with social or educational robots are becoming increasingly commonplace, with emerging methodologies being proposed regarding the design of interaction patterns for child-robot-interaction (cHRI). Yet, technological limitations remain a strong barrier to the implementation of fully autonomous robot tutoring systems. In addition, there is currently no research on how social and educational robots might be combined when designing learning tasks. Consequently, in this paper we describe the design and pilot testing of a (semi) autonomous learning task designed with a social robot (NAO) and educational robot (Cozmo) targeted at children’s computational thinking skills. Preliminary data from a pilot phase with 53 children is promising, and results are discussed with regards to identified challenges. Several solutions are proposed in the context of designing interactions for cHRI.},
booktitle = {Proceedings of the 20th Annual ACM Interaction Design and Children Conference},
pages = {542–546},
numpages = {5},
keywords = {autonomous interaction, child-robot-interaction, education, educational robots, learning, pilot study, social robots, user testing},
location = {Athens, Greece},
series = {IDC '21}
}

@inproceedings{10.1145/3545947.3576329,
author = {Herbert, Katherine G. and Anu, Vaibhav K. and Sultana, Kazi Zakia and Robila, Stefan and Ryan Miller, Jesse and Hagiwara, Sumi and Goldstein, Rebecca A. and Marlowe, Thomas},
title = {Professional and Capacity Building in K-12 Computer Science Education: A Multi-Faceted Approach},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576329},
doi = {10.1145/3545947.3576329},
abstract = {States are moving to adopt Computer Science (CS) education standards to help K-12 teachers adapt and integrate computing /computational thinking (CT) concepts into the curriculum. These approaches also rely heavily on training current and pre-service teachers and creating opportunities to learn CS while also managing the rigors of their education career. This poster presents elements of the collaboration between the Department of CS and Department of Teaching and Learning at Montclair State University (MSU) to bring CS to pre- and in-service educators. Here we will highlight our curriculum work and professional development (PD) series. The New Jersey (NJ) Department of Education has adopted CS Education standards for K-12 and distinctly funded curriculum development and faculty formation programs. MSU has built programs that support teachers through PD experiences in CT and CS. In the 10-month period ending March 2023, we will offer 30 PD opportunities for a CS and CS education. To date, more than 200 educators have received PD to address their educational needs regarding CS curricula.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1384},
numpages = {1},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3328778.3372595,
author = {Russell, Ingrid and Rosiene, Carolyn Pe and Gold, Aaron},
title = {A CS Course for Non-Majors Based on the Arduino Platform},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372595},
doi = {10.1145/3328778.3372595},
abstract = {We present a model for enhancing an introductory computer science course for non-majors through the use of the Arduino platform. We have developed and tested curricular modules and associated hands-on laboratories for this model. The use of the highly visual and interactive Arduino system has improved students' learning experiences, enabling them to apply and relate fundamental computational thinking concepts of algorithmic reasoning, data representation, and computational efficiency to real-world problems. Assessment results show that the approach has been effective. We present the curricular modules, our experiences using them, as well as assessment results.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1309},
numpages = {1},
keywords = {active learning, non-majors, undergraduate instruction},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3341525.3393963,
author = {Russell, Ingrid and Duan, Zhuojun and Jung, Andrew},
title = {Introducing Data Analytics Concepts in a CS Course for Non-Majors},
year = {2020},
isbn = {9781450368742},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341525.3393963},
doi = {10.1145/3341525.3393963},
abstract = {We present a curricular model for introducing data analytics concepts into an introductory computer science course for non-majors. This is accomplished through the design and implementation of hands-on laboratories projects using the Python programming language and associated tools. While introducing students to an important research area, we believe the use of these projects improves students' learning experiences, enabling them to apply and relate fundamental computational thinking concepts of algorithmic reasoning, data representation, and computational efficiency to data analytics problems. We present the curricular modules, as well as preliminary experiences using them.},
booktitle = {Proceedings of the 2020 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {551},
numpages = {1},
keywords = {data analytics, non-majors, undergraduate instruction},
location = {Trondheim, Norway},
series = {ITiCSE '20}
}

@article{10.1145/3664825,
author = {Margulieux, Lauren E. and Liao, Yin-Chan and Anderson, Erin and Parker, Miranda C. and Calandra, Brendan D.},
title = {Intent and Extent: Computer Science Concepts and Practices in Integrated Computing},
year = {2024},
issue_date = {September 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {3},
url = {https://doi.org/10.1145/3664825},
doi = {10.1145/3664825},
abstract = {Integrated computing curricula combine learning objectives in computing with those in another discipline, like literacy, math, or science, to give all students experience with computing, typically before they must decide whether to take standalone CS courses. One goal of integrated computing curricula is to provide an accessible path to an introductory computing course by introducing computing concepts and practices in required courses. This study analyzed integrated computing curricula to determine which CS practices and concepts are taught, how extensively the curricula are taught, and, by extension, how they might prepare students for later computing courses. The authors conducted a content analysis to examine primary and lower secondary (i.e., K-8) curricula that are taught in non-CS classrooms, have explicit CS learning objectives (i.e., CS+X), and that took 5+ hours to complete. Lesson plans, descriptions, and resources were scored based on frameworks developed from the K-12 CS Framework, including programming concepts, non-programming CS concepts, and CS practices. The results found that curricula most extensively taught introductory concepts and practices, such as sequences, and rarely taught more advanced content, such as conditionals. Students who engage with most of these curricula would have no experience working with fundamental concepts, like variables, operators, data collection or storage, or abstraction in the context of a program. While this focus might be appropriate for integrated curricula, it has implications for the prior knowledge that students should be expected to have when starting standalone computing courses.},
journal = {ACM Trans. Comput. Educ.},
month = aug,
articleno = {35},
numpages = {23},
keywords = {Integrated computing, computational thinking, CS+X, content analysis, curricula analysis, K-12 computer science education, primary school computer science education}
}

@inproceedings{10.1145/3481312.3481347,
author = {K\"{o}rber, Nina and Bailey, Lisa and Greifenstein, Luisa and Fraser, Gordon and Sabitzer, Barbara and Rottenhofer, Marina},
title = {An Experience of Introducing Primary School Children to Programming using Ozobots (Practical Report)},
year = {2021},
isbn = {9781450385718},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3481312.3481347},
doi = {10.1145/3481312.3481347},
abstract = {Algorithmic thinking is a central concept in the context of computational thinking, and it is commonly taught by computer programming. A recent trend is to introduce basic programming concepts already very early on at primary school level. There are, however, several challenges in teaching programming at this level: Schools and teachers are often neither equipped nor trained appropriately, and the best way to move from initial “unplugged” activities to creating programs on a computer is still a matter of open debate. In this paper, we describe our experience of a project aiming at supporting local primary schools in introducing children to programming concepts using Ozobot robots. These robots have two distinct advantages: First, they can be programmed with and without computers, thus helping the transition from unplugged programming to programming with a computer. Second, they are small and easy to transport, even when used together with tablet computers. Although we learned in our outreach events that the use of Ozobots is not without challenges, our overall experience is positive and can hopefully support others in setting up first encounters with programming at primary schools.},
booktitle = {Proceedings of the 16th Workshop in Primary and Secondary Computing Education},
articleno = {23},
numpages = {6},
keywords = {Ozobots, Primary School Programming, Programming Education},
location = {Virtual Event, Germany},
series = {WiPSCE '21}
}

@inproceedings{10.1145/3402942.3403010,
author = {Troiano, Giovanni Maria and Schouten, Dylan and Cassidy, Michael and Tucker-Raymond, Eli and Puttick, Gillian and Harteveld, Casper},
title = {All Good Things Come in Threes: Assessing Student-Designed Games via Triadic Game Design},
year = {2020},
isbn = {9781450388078},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3402942.3403010},
doi = {10.1145/3402942.3403010},
abstract = {Game design is emerging in contemporary education, especially in constructionist curricula for student-centered and discovery learning. While previous work focused on assessing how complementary skills (e.g., computational thinking) develop through game design, few have attempted to assess the very games designed by students. Here, we show preliminary results on using the Triadic Game Design (TGD) model to assess the elements that may constitute a ”balanced” student-designed game in the context of constructionist learning. Our results show that TGD is viable to carry out such assessment. We conclude by discussing the limitations of our approach and propose directions for future work.},
booktitle = {Proceedings of the 15th International Conference on the Foundations of Digital Games},
articleno = {88},
numpages = {4},
keywords = {Game-based learning, Scratch, constructionism, game design},
location = {Bugibba, Malta},
series = {FDG '20}
}

@inproceedings{10.1145/3545947.3576264,
author = {Mak, Janice and Rosato, Jennifer and Hosten, Melissa},
title = {Data Science Landscape in Preservice Teacher Education},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576264},
doi = {10.1145/3545947.3576264},
abstract = {Tangential to the efforts to bring computer science (CS) into K-12 education, there has been increasing recognition of the critical role of data science (DS) in preparing future citizens to be able to gather, analyze, and represent data. With only 51% of K-12 schools offering CS, however, and the critical need for students to engage in DS practices, there is the need to examine ways to integrate DS in other subjects. Our study explores the current landscape of DS in methods and content courses within preservice teacher pathways. This poster outlines a study in its preliminary stages that explores how faculty teaching math, science, and social studies methods and content courses in colleges of education: a) define DS, b) conceptualize DS as related to their course content, c) make connections between DS, CS, and/or computational thinking (CT). Taking a participatory design approach, this study will also explore research-based approaches to building the capacity of preservice faculty in DS to advance the practice of teaching CS in a scalable way to expand access in equitable ways to CS and CT.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1317},
numpages = {1},
keywords = {data science, k-12 education, pre-service programs, teacher education},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3622758.3622889,
author = {Jhaveri, Samyak and Krone-Martins, Alberto and Lopes, Cristina V.},
title = {Cloning and Beyond: A Quantum Solution to Duplicate Code},
year = {2023},
isbn = {9798400703881},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3622758.3622889},
doi = {10.1145/3622758.3622889},
abstract = {Quantum computers are becoming a reality. The advantage of quantum computing is that it has the potential to solve computationally complex problems in a fixed amount time, independent of the size of the problem. However, the kinds of problems for which these computers are a good fit, and the ways to express those problems, are substantially different from the kinds of problems and expressions used in classical computing. Quantum annealers, in particular, are currently the most promising and available quantum computing devices in the short term. However, they are also the most foreign compared to classical programs, as they require a different kind of computational thinking.  
In order to ease the transition into this new world of quantum computing, we present a novel quantum approach to a well-known software problem: code clone detection. We express code clone detection as a subgraph isomorphism problem that is mapped into a quadratic optimization problem, and solve it using a DWave quantum annealing computer. We developed a quantum annealing algorithm that compares Abstract Syntax Trees (AST) and reports an energy value that indicates how similar they are.  

The motivation behind this research goes well beyond code duplicate detection: our approach paves the way into how to express software engineering problems as optimization problems that can be solved by quantum annealers.},
booktitle = {Proceedings of the 2023 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {32–49},
numpages = {18},
keywords = {Quadratic Unconstrained Discrete Optimization (QUDO), Quantum Computing, Quantum-Based Code Clone Detection, Subgraph Isomorphism},
location = {Cascais, Portugal},
series = {Onward! 2023}
}

@inproceedings{10.1145/3116595.3116637,
author = {Arroyo, Ivon and Micciollo, Matthew and Casano, Jonathan and Ottmar, Erin and Hulse, Taylyn and Rodrigo, Ma. Mercedes},
title = {Wearable Learning: Multiplayer Embodied Games for Math},
year = {2017},
isbn = {9781450348980},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3116595.3116637},
doi = {10.1145/3116595.3116637},
abstract = {We present a new technology-based paradigm to support embodied mathematics educational games, using wearable devices in the form of SmartPhones and SmartWatches for math learning, for full classes of students in formal in-school education settings. The Wearable Learning Games Engine is web based infrastructure that enables students to carry one mobile device per child, as they embark on math team-based activities that require physical engagement with the environment. These Wearable Tutors serve as guides and assistants while students manipulate, measure, estimate, discern, discard and find mathematical objects that satisfy specified constraints. Multi-player math games that use this infrastructure have yielded both cognitive and affective benefits. Beyond math game play, the Wearable Games Engine Authoring Tool enables students to create games themselves for other students to play; in this process, students engage in computational thinking and learn about finite-state machines. We present the infrastructure, games, and results for a series of experiments on both game play and game creation.},
booktitle = {Proceedings of the Annual Symposium on Computer-Human Interaction in Play},
pages = {205–216},
numpages = {12},
keywords = {computational thinking, educational games, embodied cognition, mathematics, tutoring systems, wearable learning},
location = {Amsterdam, The Netherlands},
series = {CHI PLAY '17}
}

@inproceedings{10.1145/3466725.3466765,
author = {Assaf, Dorit and Oh, Yungjin and Str\"{a}ssle, Sabrina},
title = {Incorporating Maker-Centered Learning in Formal Education: A workshop from teachers for teachers},
year = {2021},
isbn = {9781450389891},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3466725.3466765},
doi = {10.1145/3466725.3466765},
abstract = {Maker-centered learning environments with their media- and tool-rich open spaces are suggested to foster a variety of important skills such as collaboration, problem-solving, digital literacy, computational thinking etc. Many initiatives emerged that brought Making closer to students of compulsory education in the last couple of years. Many of these initiatives exist in informal learning settings, such as after-school programs, summer camps, optional courses in schools, libraries, museums etc. Currently, Making has not been established broadly in formal education. This is, however, necessary if a greater variety of students is aimed to be reached. In this workshop, teachers that are interested in Making will meet other teachers that act as early adopters. Our panel members already introduced Making in their classrooms and will speak of their experiences. The aim is to collect best practices and recommended courses of action for anyone that aims at introducing Making in their school.},
booktitle = {FabLearn Europe / MakeEd 2021 - An International Conference on Computing, Design and Making in Education},
articleno = {19},
numpages = {3},
keywords = {Compulsory education, Formal education, Maker-centered learning, Makerspace, Making, STEM education, computer science education},
location = {St. Gallen, Switzerland},
series = {FabLearn Europe / MakeEd 2021}
}

@inproceedings{10.1145/3027063.3027129,
author = {Melcer, Edward},
title = {Moving to Learn: Exploring the Impact of Physical Embodiment in Educational Programming Games},
year = {2017},
isbn = {9781450346566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3027063.3027129},
doi = {10.1145/3027063.3027129},
abstract = {There has been increasing attention paid to the necessity of Computational Thinking (CT) and CS education in recent years. To address this need, a broad spectrum of animation programming environments and games have been created to engage learners. However, most of these tools are designed for the touchpad/mouse and keyboard, and few have been evaluated to assess their efficacy in developing CT/programming skills. This is problematic when trying to understand the validity of such designs for CS education, and whether there are alternative approaches that may prove more effective. My dissertation work helps address this problem. After creating a framework based on a meta-review that carefully dissects embodiment strategies in learning games, I am building and evaluating tangible and augmented reality versions of a CT game. I plan to examine how these different forms of physical interaction help to facilitate and enhance meaning-making during the learning process, and whether/how they improve related learning factors such as self-belief and enjoyment.},
booktitle = {Proceedings of the 2017 CHI Conference Extended Abstracts on Human Factors in Computing Systems},
pages = {301–306},
numpages = {6},
keywords = {computational thinking, educational games, embodied cognition, embodied interaction, physical embodiment, programming},
location = {Denver, Colorado, USA},
series = {CHI EA '17}
}

@inproceedings{10.1145/3564721.3564738,
author = {Friend, Michelle and Mcgill, Monica and Reinking, Anni},
title = {Solve This! K-12 CS Education Teachers’ Problems of Practice},
year = {2022},
isbn = {9781450396165},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3564721.3564738},
doi = {10.1145/3564721.3564738},
abstract = {Problem. Educational research identifies answerable questions, but often does not address the problems K-12 teachers identify as important. Further, academic research findings can be difficult for teachers to apply to their practices and unique contexts. Currently, little research exists on the lived experiences of primary and secondary instructors who teach computer science (CS) or computational thinking (CT) and also on the specific problems of practice teachers face when teaching CS. Research Question. What problems of practice do K-12 teachers face when teaching CS/CT?Method. Data for this qualitative study was collected using an online questionnaire distributed to teachers internationally. CS/CT teachers responded to an open-ended prompt asking for problems related to teaching CS. The data was analyzed using descriptive first-round coding and focused second-round coding. Validity was established through collaborative coding. Analysis was theorized using locus of control. Findings. Problems with students encompassed behavioral, cognitive, and attitudinal issues, as well as lack of home support or resources. Teachers identified many problems of policy notably stemming from lack of resources or support from administrators. A smaller number of challenges, such as lack of content knowledge, were situated within teachers themselves. While some problems such as student motivation are general, a number of responses identified unique challenges in CS education compared to other disciplines. Implications. Identifying problems faced by teachers can guide professional development offerings, help researchers develop studies that would result in meaningful improvement to CS education, and suggest policy decisions which would result in better outcomes for students.},
booktitle = {Proceedings of the 22nd Koli Calling International Conference on Computing Education Research},
articleno = {8},
numpages = {13},
keywords = {K-12, problems of practice, teachers},
location = {Koli, Finland},
series = {Koli Calling '22}
}

@inproceedings{10.1145/3653666.3656092,
author = {Levitt, Diane and Ray, Meg},
title = {Ecosystems That Build Equitable, K-5 Sustainable Computer Science Education},
year = {2024},
isbn = {9798400706264},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3653666.3656092},
doi = {10.1145/3653666.3656092},
abstract = {The rollout of computer science education has been dependent on a patchwork of uncoordinated professional learning experiences. This has left some schools serving students from underrepresented groups without an articulated, rigorous, joyful K-12 CS education. Based on our work with four urban schools serving such students, we propose that an ecosystem of support that prepares every administrator and teacher to include CS in every student's education with a whole school approach and sustained professional learning, is one way to assure an equitable, sustainable CS education. We propose changes in policy to scaffold such an ecosystem.},
booktitle = {Proceedings of the 2024 on RESPECT Annual Conference},
pages = {254–258},
numpages = {5},
keywords = {K-5 computer science education, computational agency, computational thinking, content coaching, equity, justice-centered computing, teacher professional development},
location = {Atlanta, GA, USA},
series = {RESPECT 2024}
}

@inproceedings{10.1145/3568812.3603480,
author = {Yesilyurt, Ezgi and Turgut, Refika and Kaya, Erdogan and Sahin, Burak and Sahin, Elif Adibelli and Deniz, Hasan},
title = {Multilingual Elementary School Students' Computer Science and STEM Learning through Robotics},
year = {2023},
isbn = {9781450399753},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3568812.3603480},
doi = {10.1145/3568812.3603480},
abstract = {As one of the fastest growing populations in the K-12 public school system, multilingual learners (MLs), particularly those from Hispanic and/or Latinx backgrounds, represent the future workforce of the nation [1, 2, 10, 12]. Yet, they are drastically underrepresented in STEM, including computer science (CS) fields and little is known about effective ways to teach computational skills to MLs at the elementary school level [1, 3, 5, 9]. This three-year collaborative project,&nbsp;funded by the&nbsp;National Science Foundation, aims to develop linguistically inclusive integrated computer science (CS) curricula using educational robotics for elementary students in grades 3-5. More specifically, in this project, we integrate CS with mathematics, science, and English language arts to extend all elementary students’ exposure to meaningful and relevant CS experiences [4, 8, 11]. The integrated units incorporate a range of linguistically inclusive pedagogical strategies and language scaffolds to engage MLs in language-rich CS experiences, provide them with equitable learning opportunities, and support their development of computational thinking skills. The units are designed using Predict-Run-Investigate-Modify-Make (PRIMM) and TIPP pedagogical frameworks [6, 7] to scaffold students’ learning of CT concepts and promote CS learning. The project will utilize a design-based research framework gathering classroom-based data, assessment data, and interviews with teachers and students. The central research questions explore how participation in the project influences elementary teachers’ CS teaching efficacy beliefs and identity positionings as teachers of CS and MLs. The research questions related to students include how the participation in the integrated units impacts students’ CS skills, views of computer scientists, and computer scientist identity. We are in the process of providing professional development programs for teachers. At the beginning and end of the PD program, we will gather data from participant teachers. In the following academic semester, the participant teachers will be expected to implement the curricular materials in their own classrooms. Prior and subsequent to the class implementations, the data will be collected from students to examine the effect of curricular units.},
booktitle = {Proceedings of the 2023 ACM Conference on International Computing Education Research - Volume 2},
pages = {44–45},
numpages = {2},
keywords = {Educational Robotics, Elementary Education, K-12 CS education, Multilingual Learners},
location = {Chicago, IL, USA},
series = {ICER '23}
}

@inproceedings{10.1145/3375258.3375261,
author = {Stuurman, Sylvia and Passier, Harrie J.M. and Geven, Fr\'{e}d\'{e}rique and Barendsen, Erik},
title = {Autism: Implications for Inclusive Education with respect to Software Engineering},
year = {2020},
isbn = {9781450377171},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3375258.3375261},
doi = {10.1145/3375258.3375261},
abstract = {Within Computer science and Software engineering, the prevalence of students with a diagnosis of autism spectrum disorder is relatively high. Ideally, education should be inclusive, with which we mean that education must be given in such a way that additional support is needed as little as possible.In this paper, we present an overview on what is known about the cognitive style of autistic individuals and compare that cognitive thinking style with computational thinking, thinking as an engineer, and with academic thinking. We illustrate the cognitive style of autistic students with anecdotes from our students.From the comparison, we derive a set of guidelines for inclusive education, and we present ideas for future work.},
booktitle = {Proceedings of the 8th Computer Science Education Research Conference},
pages = {15–25},
numpages = {11},
keywords = {Autism, Cognitive thinking style, Inclusive education},
location = {Larnaca, Cyprus},
series = {CSERC '19}
}

@inproceedings{10.1145/3287324.3293870,
author = {Dandridge, Tikyna M. and Ehsan, Hoda and Gajdzik, Elizabeth and Lowe, Tony and Ohland, Carson and Yeter, Ibrahim H. and Brophy, Sean and Cardella, Monica E.},
title = {Integrated STEM+C learning for K-2 aged children: CT competencies as a precursor to K-2 computer science education},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293870},
doi = {10.1145/3287324.3293870},
abstract = {As computer science education is incorporated into the United States educational system, it is imperative that children, educators, and caregivers understand the requisite competencies called "computational thinking" (CT). CT has advanced since first described by Wing in 2006 as an algorithmic problem-solving approach. For three years, the INSPIRE Research Institute for Pre-College Engineering (INSPIRE) has studied integrated science, technology, engineering, mathematics, and computational thinking (STEM+C) learning for K-2 aged children, in both formal and informal settings. At the project's origin, the team focused on characterizing and operationalizing the CT competencies. Our studies then followed how children, instructors, and families engaged in the CT competencies within school and out-of-school. As the project evolved, our team created curricula to be used in K-2 classrooms, activities for out-of-school settings, a summer training for educators, a CT exhibit at a small Midwestern science center, and facilitated a field trip for elementary students. Our poster presents findings from all stages of our NSF-funded STEM+C project. For classroom settings, we report discoveries from integrated STEM+C curricula development and children's CT capabilities and engagement within the classroom and during homeschooling. For informal settings, we report children's abilities to engage in CT when engaging with a specially designed CT exhibit and an open-ended problem-solving task. We also discuss our data management for our project. Finally, we report the lessons and implications of CT for K-2 ask a viable skill for computer science education. For additional info ideas, handouts will be given during poster presentation.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1280},
numpages = {1},
keywords = {computational thinking, integrated stem+c},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3502717.3532166,
author = {Yadav, Aman and Connolly, Cornelia and Berges, Marc and Chytas, Christos and Franklin, Crystal and Hij\'{o}n-Neira, Raquel and Leftwich, Anne and Marguliex, Lauren and Macann, Victoria and Warner, Jayce R.},
title = {Models for Computer Science Teacher Preparation: Developing Teacher Knowledge},
year = {2022},
isbn = {9781450392006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502717.3532166},
doi = {10.1145/3502717.3532166},
abstract = {Across the globe, Computer Science Education has grown tremendously over the past decade to teach primary and secondary students computing ideas and tools. From integrating computational thinking in disciplines to teaching computer science as a stand alone subject, models for teacher preparation range from one and done professional learning workshops to full certificate and licensure programs. The group will focus on providing a landscape of how CS teachers are prepared academically in various countries and make evidence-based recommendations for how teachers should be educated to develop knowledge and skill to teach computer sci- ence. The working group will also discuss how to develop these knowledge systems while promoting instruction that is equitable and centers students in the classroom. In addition, the working group will focus on new directions in computing education (such as, artificial intelligence and machine learning) and their implica- tions for teacher preparation. We will bring together a group of international computer science education scholars who have been engaged in teacher preparation. In addition to what knowledge teachers need to teach CS, we will also focus on how the field is preparing teachers to think critically about AI/ML and the role of computer science in the design of technology tools to achieve goals while mitigating potential societal harms.},
booktitle = {Proceedings of the 27th ACM Conference on on Innovation and Technology in Computer Science Education Vol. 2},
pages = {568–569},
numpages = {2},
keywords = {computer science education, pre-service teachers, teacher education},
location = {Dublin, Ireland},
series = {ITiCSE '22}
}

@article{10.1145/3447892.3447900,
author = {Pulimood, S. Monisha and Pearson, Kim and Bates, Diane},
title = {Encouraging CS students to compute for social good through collaborative, community-engaged projects},
year = {2021},
issue_date = {February 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {1},
issn = {0095-2737},
url = {https://doi.org/10.1145/3447892.3447900},
doi = {10.1145/3447892.3447900},
abstract = {Which pedagogical techniques better engage computer science (CS) students in computing for social good? We examine this question with students enrolled in classes using the Collaborating Across Boundaries to Engage Undergraduates in Computational Thinking (CABECT) pedagogical model, that pairs CS and non-CS courses with a community partner to propose solutions to a local problem. Pre- and post-tests of self-assessed concerns about civic responsibility, global responsibility, and local civic efficacy were administered to the students in a three-year long pedagogical experiment, which paired five CS courses with five journalism courses. While CS students were not statistically different from their journalism peers in pre-test measures of social and global responsibility, they lagged behind in local efficacy. In the posttest, CS students had significantly increased their sense of local efficacy to the extent that they were statistically indistinguishable from journalism students. Community-engaged learning projects, such as the one in the CABECT model, show great potential for attracting students to computing for social good.},
journal = {SIGCAS Comput. Soc.},
month = jan,
pages = {21–22},
numpages = {2},
keywords = {civic engagement, community-engaged learning, computing for social good}
}

@inproceedings{10.1145/2899415.2899465,
author = {Rodriguez, Brandon and Rader, Cyndi and Camp, Tracy},
title = {Using Student Performance to Assess CS Unplugged Activities in a Classroom Environment},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2899465},
doi = {10.1145/2899415.2899465},
abstract = {Computer Science Unplugged activities have been shown to be successful in increasing student interest in computer science when used in outreach and after school events. There is less research available on adapting these extra-curricular activities for use in a classroom setting, where there are more students and the activities must support educational goals, not just changes in attitude. We describe our work in updating several existing CS Unplugged activities as well as introducing some new activities for use in an American middle school classroom. One challenge when using CS Unplugged activities is to determine what, if anything, students are learning. In this paper we detail one approach that links the updated activities to computational thinking skills, then incorporates worksheets where students illustrate their understanding.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {95–100},
numpages = {6},
keywords = {classroom assessment, computational thinking, cs unplugged},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

@inproceedings{10.1145/3478432.3499229,
author = {Davis, Kalisha and Twarek, Bryan and Becton-Consuegra, Dinah and Koshy, Sonia},
title = {The Needs of K-12 Computer Science Educators towards Building an Inclusive Classroom: Implications for Policy, Practice, and Research},
year = {2022},
isbn = {9781450390712},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478432.3499229},
doi = {10.1145/3478432.3499229},
abstract = {The technology sector remains one of the fastest growing industries across the nation and continues to rapidly permeate all facets of society. The next generation of the computing workforce must be equipped with the skills to examine how existing systems exacerbate inequities, while developing the competencies to build new, more equitable innovations. To enable this shift, computer science (CS) instruction needs to develop not only students' computing identities and computational thinking, but also critical thinking and ethical reasoning. Educators are key to this transformation, yet little is known about the landscape of K-12 CS educators and how equipped they are to provide equitable CS instruction. To understand the challenges that CS educators face and identify the supports and resources to more effectively equip them to serve a diverse student body, these panelists launched a national landscape survey. This panel of experts from the Kapor Center and the Computer Science Teachers Association will reflect on the survey findings and lead a discussion with the audience about the implications of the data on the future of educational policy, practice, and research to better support CS educators to build more equitable classroom spaces.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education V. 2},
pages = {1041–1042},
numpages = {2},
keywords = {cs education policy, cs education research, culturally-responsive computing, equity, k-12 computing education, professional development},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/2676723.2677269,
author = {Basawapatna, Ashok Ram and Repenning, Alexander and Koh, Kyu Han},
title = {Closing The Cyberlearning Loop: Enabling Teachers To Formatively Assess Student Programming Projects},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2677269},
doi = {10.1145/2676723.2677269},
abstract = {Teachers are increasingly integrating game design and simulation creation projects as part of their classroom curricula. These projects have many benefits including motivating students in STEM activities and exposing students to computational thinking - a key part of upcoming science standards. However, barriers still exist to project-based computer science in a lab environment. One major issue is that, as students are creating their projects, it is extremely difficult for teachers to know how every student is progressing through a given activity and how to keep every student engaged. This paper introduces a Cyberlearning system entitled REACT (Real-Time Evaluation and Assessment of Computational Thinking) that is an initial step towards giving teachers quickly discernible real-time data corresponding to each student project. REACT provides teachers with a sortable dashboard, consisting of data from each student, that shows the characters students created and used to populate their game or simulation world as well as the semantic meaning behind what students have programmed. A feasibility test with four middle school classrooms shows that REACT helps teachers formatively assess students and provide targeted instruction to struggling individuals. Furthermore, teachers showed excitement at the summative and student self-assessment capabilities of REACT, and every teacher independently stated they would use the REACT system in subsequent end-user programming units.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {12–17},
numpages = {6},
keywords = {assessment tools, computational thinking, cyberlearning, end-user game and simulation design, formative assessment, k-12 computer science education, summative assessment},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/3641554.3701896,
author = {Guzdial, Mark and Nelson-Fromm, Tamara},
title = {Designing Courses for Liberal Arts and Sciences Students Contextualized around Creative Expression and Social Justice},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701896},
doi = {10.1145/3641554.3701896},
abstract = {The goal of teaching everyone computing (explicitly including programming) predates the definition of the computer science (CS) major and even the prospect of a software development career. At the University of Michigan, we are creating courses for non-CS majors which are grounded in the computational practices of liberal arts and sciences faculty. These courses have no connection to the CS major curriculum or software development jobs. We focus here on two of the themes that those faculty valued (Computing for Expression and Computing for Justice) and the introductory courses that we designed around each theme. The courses emphasize gaining broad perspectives of computing, which serve the study of multiple disciplines. Student activities include readings, writing essays, classroom discussion, and open-ended programming homework assignments. This experience report describes our design process, the Creative Expression and Social Justice courses, and an initial evaluation of our design. Most of the programming assignments were written in the block-based programming language Snap!, with some in-class exercises using teaspoon languages. Several units ended with an ebook assignment to connect the Snap! programming to equivalent programs in Python, Processing, and SQL. Interview and survey findings suggest that students found this sequence and the courses useful, despite not counting toward a CS major or focusing on early software development skills. Students described usefulness in terms of developing general computing knowledge, preparation for a range of future careers, and introducing them to other course choices.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {423–429},
numpages = {7},
keywords = {computational literacy, computational science, computational thinking, critical computing, cs for all, digital humanities, liberal arts and sciences},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/2532333.2532345,
author = {Van Camp, Robert},
title = {Alice Summer Camps: Evaluating Multiple Formats},
year = {2013},
isbn = {9781450322508},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2532333.2532345},
doi = {10.1145/2532333.2532345},
abstract = {During the summer of 2009, an Alice camp was taught to gifted students in our region. The following year our department secured an NSF CPATH Grant for Computational Thinking, grant number 0939106. In 2010 we hosted two weeks of our Adventures with Alice Programming and Computational Thinking camp, the first week with middle school students and the second with high school students. In both 2011 and 2012, we hosted one week of a combined middle school/high school camp. A general description of what we did in the camp will also be part of the poster presentation along with what we believe worked well and what could be improved.},
booktitle = {Proceedings of Alice Symposium on Alice Symposium},
articleno = {16},
numpages = {1},
keywords = {Alice, Camps, Computational Thinking, K-12 Education},
location = {Durham, NC, USA},
series = {ALICE '13}
}

@inproceedings{10.1145/3408877.3439658,
author = {Johnson, Andrea E.},
title = {To GitHub or Not to GitHub?},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439658},
doi = {10.1145/3408877.3439658},
abstract = {While preparing students for careers upon graduation, faculty often have to manage the priorities of bridging the gap between the level of student preparation and the expected level of preparedness. The prioritization of these tasks is influenced by discipline and industry specific guidelines and does not always align with the experience of students at Historically Black College and Universities (HBCU) and Minority Serving Institutions (MSI). The Association of Computing Machinery (ACM) 2013 Computer Science Curricula guidelines highlight version control as one of many core tools in the Social Issues and Professional Practice (SP) Knowledge Area students should experience in their upper-level software engineering courses. Research has demonstrated that at this level, students receive exposure to the tool but are not able to gain sufficient mastery of the tool. Other researchers have advocated for version control being introduced earlier in the computer science curricula. There is limited research that indicates that this particular tool improves the learning outcomes for students or significantly complements the other ACM Knowledge Areas. This presentation seeks to challenge the notion that the use of version control systems improves HBCU students' computational thinking (CT) skills and in turn prepares them for careers beyond graduation. It is important to note, there is no research that directly addresses the use of version control in predominately African American classrooms.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1331},
numpages = {1},
keywords = {computing education, github, programming education, version control systems},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3689050.3704795,
author = {Ranjan, Krithik},
title = {Tangible Interfaces for Computational Tinkering},
year = {2025},
isbn = {9798400711978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689050.3704795},
doi = {10.1145/3689050.3704795},
abstract = {Tangible interfaces have become integral to human-computer interaction, especially in educational settings that offer engaging ways for learners to interact with digital technology. This paper explores the landscape of tangible interfaces for computational tinkering—tools and interfaces that empower learners to engage with computational experiences in a playful and open-ended format. In this preliminary work for the Graduate Student Consortium, I examine a set of these projects through the lenses of context, tangibility, expressivity, and materiality, and seek to develop a rich classification and research goals from the insights. This paper also presents two of my projects in this space.},
booktitle = {Proceedings of the Nineteenth International Conference on Tangible, Embedded, and Embodied Interaction},
articleno = {125},
numpages = {6},
keywords = {Tangible Interaction, TUI, Tinkering, Children, Computational Tinkering, Open-ended learning},
location = {
},
series = {TEI '25}
}

@inproceedings{10.1145/3470716.3470718,
author = {Guo, Fen and Bing Yu, Jun and Xin Liu, Xin and Xu, Ke},
title = {The Construction and Practice of the Blended Teaching Mode on College Computer-common Courses},
year = {2021},
isbn = {9781450389488},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3470716.3470718},
doi = {10.1145/3470716.3470718},
abstract = {Investigating the current college computer-common class teaching in South China University of Technology (SCUT), it's indicated that although the online and offline blended teaching was practiced, there's still a lack of classroom interaction and hierarchical teaching. So high-quality teaching needs a reform of teaching mode urgently. In order to improve the teaching quality of computer-common class, an online and offline blended teaching mode with the integration of three supports, three concepts and three stages is proposed, analyzing the characteristics of learners and constructing online courses. The three concepts are "student-centered", "teaching practice as the key point" and " focusing on students' learning process " respectively. With the supports of teaching, management and evaluation, a three-stage teaching process is designed, which consists of pre-class preparation, the teaching activities based on flipped classroom and the evaluation. This study took the course: "Multimedia Technology and Application (MTA)", as an example to carry out this blended teaching mode in SCUT from 2017 to 2019. The results implied that this model had promoted students' participation and interest in learning, improved the achievement of course objectives and teaching quality, and boost students' computational thinking ability and information literacy.},
booktitle = {Proceedings of the 6th International Conference on Information and Education Innovations},
pages = {6–11},
numpages = {6},
keywords = {blended teaching, flipped classroom, online and offline},
location = {Belgrade, Serbia},
series = {ICIEI '21}
}

@inproceedings{10.1145/3510456.3514155,
author = {Groher, Iris and Vierhauser, Michael and Sabitzer, Barbara and Kuka, Lisa and Hofer, Alexander and Muster, David},
title = {Exploring diversity in introductory programming classes: an experience report},
year = {2022},
isbn = {9781450392259},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510456.3514155},
doi = {10.1145/3510456.3514155},
abstract = {Digitization is becoming part of almost everyone's life, ranging from smartphones and tablets, smart devices automatically collecting information, to tools and scripting languages that are widely available and easy to use. This has recently been reflected in various university curricula, where courses such as computational thinking, and basic programming classes are now included in a broader range of (non-computer-science) programs. However, these programs often face challenges in such courses due to their diverse student body, with students often lacking profound digital competencies and technical background. While gender diversity aspects have been broadly studied in the past, other diversity dimensions such as ethnicity, age, or educational background have largely been neglected thus far. In this paper, we report on our experiences in teaching an introductory programming course to first-year Business Informatics bachelor students. After undergoing fundamental changes in our teaching concepts and the provided learning material, we explore what diversity factors play an important role when teaching programming to non-computer science students, and how diversity is perceived by lecturers and tutors. Our analysis confirms that a collaborative teaching concept positively supports female students and students with language barriers.},
booktitle = {Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: Software Engineering Education and Training},
pages = {102–112},
numpages = {11},
keywords = {diversity dimensions, introductory programming},
location = {Pittsburgh, Pennsylvania},
series = {ICSE-SEET '22}
}

@inproceedings{10.1145/3342428.3342666,
author = {Gaggi, Ombretta and Petenazzi, Giulia},
title = {A digital platform for teaching mathematics},
year = {2019},
isbn = {9781450362610},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3342428.3342666},
doi = {10.1145/3342428.3342666},
abstract = {In this paper, we present a complete platform for an innovative way to teach mathematics. The platform is composed of a serious game to help children to understand fractions, and a web portal that allows teachers to configure exercises involving fractions, but also to design completely new exercises using a very simple block-based programming language. In this way our tool can be used by primary school teachers as an help to teach mathematics, but also secondary or high schools teachers to teach students computational thinking and basic skills of programming languages.},
booktitle = {Proceedings of the 5th EAI International Conference on Smart Objects and Technologies for Social Good},
pages = {37–42},
numpages = {6},
keywords = {Block-based language, Mobile Applications, Serious Games, Teaching Mathematics},
location = {Valencia, Spain},
series = {GoodTechs '19}
}

@inproceedings{10.1145/3516875.3516899,
author = {Andi Rachman, Taofik and Latipah, Euis and Zaqiah, Qiqi Yuliati and Erihadiana, Mohamad},
title = {Curriculum Innovation to Improve Indonesian Education in PISA International Assessment in Disruptive Education Era},
year = {2022},
isbn = {9781450386920},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3516875.3516899},
doi = {10.1145/3516875.3516899},
abstract = {Indonesia has always failed in its PISA international assessment. Although there have been improvement efforts, it has not shown a significant increase in score. The latest PISA results still put Indonesia at its lowest. The OECD as the organizer of PISA encourages curriculum changes to Indonesia in order to create a quality of international level education. In this era of globalization, education requires innovation to develop the necessary competencies in the global world. The purpose of this research describes several curriculum innovations for elementary school and junior high school based on several research, expert opinion and world experience. This research uses library research method. The data is compiled, analyzed, and concluded so as to get an overview of curriculum innovations that are in accordance with the development in the disruptive era without forgetting to be the nation that upholds religion and character. This research proposes several curriculum innovations that can be done, namely simplification of curriculum, implementing disruptive education, improving innovation skill, applying education technology widely, applying PISA assessment in daily evaluation, strengthening religious education and character and applying scientific and computational thinking. So, with this curriculum innovation, it will have a positive impact on the development of Indonesian education.},
booktitle = {Proceedings of the 5th International Conference on Learning Innovation and Quality Education},
articleno = {19},
numpages = {8},
keywords = {Curriculum innovation, Indonesian education, PISA, disruptive education},
location = {Surakarta, Indonesia},
series = {ICLIQE '21}
}

@inproceedings{10.1145/3641555.3704769,
author = {Sussman, Alan and Prasad, Sushil and Bunde, David P. and Spacco, Jaime and Gannod, Gerald and Crockett, April Renee and Vaidyanathan, Ramachandran},
title = {Modernizing the CS Introductory Sequence with Parallel and Distributed Computing (and some AI)},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3704769},
doi = {10.1145/3641555.3704769},
abstract = {Parallel and distributed computing (PDC) has become pervasive in all aspects of computing, so it is essential that students include parallelism and distribution in the computational thinking that they apply to problem solving, from the beginning of their computing education. With all computing devices that students use having multiple cores as well as a GPU in many cases, many students' favorite applications use multiple cores and/or distributed processors. However, we are still teaching them to solve problems using only sequential thinking. Why?This hands-on tutorial will demonstrate how easy it is to open students' eyes to exploiting concurrency in problem solving. You will participate in plugged and unplugged activities that will help students to recognize examples of PDC concepts and concurrency in the world around them. We introduce plugged and unplugged curriculum modules that have been successfully integrated in existing computing classes at multiple institutions. We will also discuss recent efforts at integrating AI methods, including LLMs, into introductory classes.A laptop capable of running a C/C++ compiler, a Java virtual environment, and a Python interpreter is needed to fully participate in activities. However, attendees may learn the core concepts without a laptop. The activities and curriculum modules have been used successfully to teach PDC concepts in early computing courses and will be available after the workshop. Participants will receive a stipend of 400 to defray their cost of registration and one-night hotel stay. The CDER center will also have a booth in the exhibition hall for additional support.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1775},
numpages = {1},
keywords = {acm/ieee-cs/aaai computer science curricula, ai, computing education, cs1/ cs2, early computing class, hpc education, undergraduate instruction, pdc education},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3357236.3395555,
author = {Mikkonen, Jussi and Fyhn, Christina},
title = {Storycoding - Programming Physical Artefacts for Research Through Design},
year = {2020},
isbn = {9781450369749},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3357236.3395555},
doi = {10.1145/3357236.3395555},
abstract = {Making programmable physical artefacts and prototypes has inherent value for Research-through-Design (RtD) based HCI. Furthermore, the abstractions and representations within RtD and programming are vastly different, such as between observations, storyboards and the code. Studies have shown that the program of an artefact influences the RtD outcome, but there is also a disconnect between the observations of use and the abstractions involved in the programming. How can we program an artefact so that the code can be created, modified and reflected upon based on directly observable and non-technical abstractions? In this paper we present Storycoding, a computational-thinking based method for programming that focuses on bridging the representational abstractions. Using Storycoded artefacts, we examine programming in light of RtD. We discuss how Storycoding enables programming that is directly observable between the use and the abstractions, being respectful towards RtD. Finally, we conclude with implications towards HCI research and practice.},
booktitle = {Proceedings of the 2020 ACM Designing Interactive Systems Conference},
pages = {441–455},
numpages = {15},
keywords = {artefact behaviour, computational behaviour, human-computer interaction, programming, research through design},
location = {Eindhoven, Netherlands},
series = {DIS '20}
}

@inproceedings{10.1145/2462476.2465574,
author = {Scott, Jeremy},
title = {The royal society of Edinburgh/British computer society computer science exemplification project},
year = {2013},
isbn = {9781450320788},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2462476.2465574},
doi = {10.1145/2462476.2465574},
abstract = {In August 2011, Google Chairman Eric Schmidt came to Scotland and expressed great concern at the state of Computer Science (CS) education in the UK's schools. This was a timely intervention: in Scotland, a new national curriculum is providing an opportunity to cement CS and computational thinking firmly within the curriculum and reverse a recent decline in uptake. To support teachers delivering this new curriculum and to provide students with an experience of CS that is accessible and exciting, the Royal Society of Edinburgh (RSE) and British Computer Society (BCS) have commissioned three extensive resources that seek to deliver CS in a way that is relevant to students' own digital lives. These use a range of pedagogical approaches to teach computational thinking and enable meaningful interdisciplinary learning -- a cornerstone of Scotland's new curriculum.},
booktitle = {Proceedings of the 18th ACM Conference on Innovation and Technology in Computer Science Education},
pages = {315},
numpages = {1},
keywords = {computational thinking, computer science, education, programming, secondary school},
location = {Canterbury, England, UK},
series = {ITiCSE '13}
}

@inproceedings{10.1145/3291279.3339444,
author = {Pena, Joslenne},
title = {Seeding the Computational Skills of Diverse Non-programmers through Non-formal Workshops},
year = {2019},
isbn = {9781450361859},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291279.3339444},
doi = {10.1145/3291279.3339444},
abstract = {Non-programmers, in particular, those who identify as female or gender-diverse, experience many factors that hinder their ultimate interest, participation, and success in programming. Prior work has delved into the problem of underrepresentation in STEM and specifically in Computing Education to uncover the barriers impacting these groups. Yet, attraction and retention remains a challenge. I argue that while formal learning pathways are critical to increasing participation of diverse learners, it is also integral to provide informal and non-formal learning opportunities as well. My research uses mixed-methods within a design-based research approach to offer and evaluate an active learning beginners' programming workshop called Code For Her. The workshop is designed to introduce females and gender-diverse individuals to web development. My goal is to analyze participants' experiences and progress within a trajectory framework, producing a narrative of their behaviors and attitudes over both short-term and longer-term intervals. In a pilot study of the workshop design, I observed increases in self-efficacy and positive attitudes, as well as changes in ways of thinking about computing. I note that the brief exposure of a workshop may seed understanding and skills in computation, but is not likely to convert non-programmers into programmers. Instead, I am exploring a new construct - computational grounding - that refers to participants' enhanced orientation toward computing-related behaviors. I will operationalize and study this construct using the workshop activities, thereby enhancing discussions of computational thinking.},
booktitle = {Proceedings of the 2019 ACM Conference on International Computing Education Research},
pages = {347–348},
numpages = {2},
keywords = {coding workshop, gender, informal learning, non-programmers},
location = {Toronto ON, Canada},
series = {ICER '19}
}

@article{10.1145/3084688,
author = {Tichy, Walter},
title = {Is quantum computing for real? an interview with Catherine McGeoch of D-Wave Systems},
year = {2017},
issue_date = {July 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2017},
number = {July},
url = {https://doi.org/10.1145/3084688},
doi = {10.1145/3084688},
abstract = {In this interview, computer scientist Catherine McGeoch demystifies quantum computing and introduces us to a new world of computational thinking.},
journal = {Ubiquity},
month = jul,
articleno = {2},
numpages = {20}
}

@inproceedings{10.1145/2676723.2691878,
author = {Fordham, Eileen and Freger, Halley and Hinchman-Dominguez, Amanda and Mitchell, Alexander and Rebelsky, Daniel and Tsou, Victoria and Wheeler, Earnest and Wolter, Zoe and Rebelsky, Samuel A.},
title = {MIST, The Mathematical Image Synthesis Toolkit},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2691878},
doi = {10.1145/2676723.2691878},
abstract = {MIST, the Mathematical Image Synthesis Toolkit, is an open-source, Web-based graphics application in which students develop skills in computational thinking and deepen their understanding of mathematical functions through creative play in making images. Using a drag-and-drop interface, students build functions that describe animated abstract images. These functions combine a few basic images (e.g., a horizontal blend, a vertical blend, and a time-based blend) using mathematical operators whose semantics are based on corresponding points in each image (e.g., MIST includes models for adding and multiplying colors). Students develop a variety of skills in computational thinking by using the small set of images and operations to develop complex images, not only images that the system challenges them to make but also images that they find themselves inspired to create and even images that their peers challenge them to build. MIST also incorporates a community of artists/learners. Images created in MIST are available to other MIST users to comment on and remix (provided the designer permits reuse). MIST community members may also create challenges for other community members and can curate "galleries" of images they find particularly engaging, interesting, or even useful as challenges for others. Users can also share their images via Facebook or "tweet" their recent creations. We find that this additional community further encourages students to develop new and interesting images.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {599},
numpages = {1},
keywords = {animation, computational thinking, functional programming, open source, social media, web software},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/3421590.3421594,
author = {Guo, Meize and Ottenbreit-Leftwich, Anne},
title = {Exploring the K-12 computer science curriculum standards in the U.S},
year = {2020},
isbn = {9781450387590},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3421590.3421594},
doi = {10.1145/3421590.3421594},
abstract = {In order to create early exposure and to guide more talent into computing, computer science was included in K-12 education as a new subject area in many states. Although each state has different educational goals, computer science curriculum standards ensure equality among the states, especially in guiding teaching and accessing students' achievements. In this study, we applied content analysis to investigate the published computer science standards to examine: (1) How did computer science standards fit within the whole curriculum? (2) What concepts were covered in the computer science standards in the U.S.? The results showed four approaches to housing computer science in the whole curriculum. The Computer Science Teachers Association Computer Science framework was broadly adopted. Moreover, three major concepts, computer literacy, digital citizenship, and computational thinking, were additionally emphasized at the state standard level. This study fundamentally reported K-12 CS promotion in the U.S. through an academic standard scope, which directs K-12 CS teaching and learning. Additionally, this study prompted a conversation of preparing for different kinds of computing skills at the K-12 level in the U.S. among the policy makers and scholars},
booktitle = {Proceedings of the 15th Workshop on Primary and Secondary Computing Education},
articleno = {6},
numpages = {6},
keywords = {K-12 computer science, computer science concepts, computer science education, curriculum standards},
location = {Virtual Event, Germany},
series = {WiPSCE '20}
}

@inproceedings{10.1145/3017680.3022469,
author = {Aggarwal, Ashish},
title = {Neo-Piagetian Classification of Reasoning Ability and Mental Simulation in Microsoft's Kodu Game Lab},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3022469},
doi = {10.1145/3017680.3022469},
abstract = {Over the past five years, there has been a major push to develop the computational thinking skills of K-12 students. Tools such as Scratch, Alice, and Kodu have been developed to engage students in learning to program through the creation of computational artifacts (e.g., games, animations, and stories). However, less is known about how elementary and middle school children reason about program behavior. Such skills are useful for reading and adapting others programs, locating possible sources of bugs, and predicting program behavior given code snippets (i.e., mental simulation). The goal of this poster is to measure and track the development of students' ability to reason about programs using Teague &amp; Lister's Neo-Piagetian classification of novice programmers: Sensorimotor, Preoperational Thinkers, and Concrete Operational Thinkers. We operationalize Teague and Lister's category descriptions by creating a criterion for each category. This classification has helped us characterize students' mastery of strategies for reasoning about the lawful behavior of programs using a Kodu curriculum. In particular, this categorization was used to differentiate students' reasoning styles using data from two studies having 20 and 19 students each. We found strong consistency in the results across both studies. Through analysis and categorization of student responses, most students fall into the preoperational thinker category. Within this category, we found a diversity of mastery patterns that help us understand where students face challenges in reasoning about programs.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {745–746},
numpages = {2},
keywords = {K-12, computational thinking, kodu, lawfulness, mental simulation, neo-piagetian, reasoning ability},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/3012430.3012498,
author = {Gonzalez-Sacristan, Carlos and Garcia-Saura, Carlos and Molins-Ruano, Pablo},
title = {Phogo: A low cost, engaging and modern proposal to learn how to program},
year = {2016},
isbn = {9781450347471},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3012430.3012498},
doi = {10.1145/3012430.3012498},
abstract = {Basic computational thinking, so necessary in today's society, can be learned in an engaging way with the use of educational robots. In order to reach very diverse groups of people, educational robots need to be simple, scalable and low cost.Inspired by the success of the LOGO project, we have developed the Phogo pedagogical platform, built around a low cost robot (less than $80) capable of tracing its path with a marker pen. We also present a high-level Python-based control library that allows for transparent and easy wireless communication with the robots. The approach was tested in an informal workshop with a group of teenagers without any previous self-conscious computational knowledge. As the students were attracted by the robot and the simple approach, they were able to gain some insight about abstract programming concepts such as variables, functions, and flow control structures. The majority of the students were people with physical, cognitive or intellectual disabilities and they were able to follow, enjoy and learn as any other student making this an accessible activity to everyone.Finally, we summarize our efforts documenting and publishing the Phogo system as open-source in order to promote its use in future workshops.},
booktitle = {Proceedings of the Fourth International Conference on Technological Ecosystems for Enhancing Multiculturality},
pages = {67–71},
numpages = {5},
keywords = {3d-printing, LOGO, Python, computational thinking, educational robots, low cost, open-source, robotic platform},
location = {Salamanca, Spain},
series = {TEEM '16}
}

@inproceedings{10.1145/3213818.3213844,
author = {Lupetti, Maria Luce and Cangiano, Serena and Ermacora, Gabriele and Russo, Ludovico Orlando and Riesen, Cristina},
title = {Open resources for thinking with computational artefacts at school},
year = {2018},
isbn = {9781450353717},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3213818.3213844},
doi = {10.1145/3213818.3213844},
abstract = {This workshop will address the theme of open resources for learning. A small series of case studies at the intersection between the world of education, technology, and making will be presented with the aim of discussing the opportunities and challenges of open source materials for practitioners. The case studies consist of projects developed across different European countries, focused on different aspects of learning and dedicated to different school levels. Nevertheless, these projects share the use of open source resources and the aim of contributing with materials and examples to the resources available for educators and designers. The workshop will combine the case studies presentations with a round table.},
booktitle = {Proceedings of the Conference on Creativity and Making in Education},
pages = {116–117},
numpages = {2},
keywords = {Computational thinking, digital fabrication, learning through play, open-source, reflective thinking},
location = {Trondheim, Norway},
series = {FabLearn Europe'18}
}

@inproceedings{10.1145/3159450.3159529,
author = {McGee, Steven and McGee-Tekula, Randi and Duck, Jennifer and McGee, Catherine and Dettori, Lucia and Greenberg, Ronald I. and Snow, Eric and Rutstein, Daisy and Reed, Dale and Wilkerson, Brenda and Yanek, Don and Rasmussen, Andrew M. and Brylow, Dennis},
title = {Equal Outcomes 4 All: A Study of Student Learning in ECS},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159529},
doi = {10.1145/3159450.3159529},
abstract = {This study investigated patterns in the development of computational thinking practices in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Past research indicates that the personal relevance of the ECS experience influences students' expectancy-value towards computer science. Expectancy-value is a construct that is predictive of career choices. We extended our research to examine whether expectancy-value influences the development of computational thinking practices. This study took place in the context of two ECS implementation projects across two states. Twenty teachers, who implemented ECS in 2016-17, participated in the research. There were 906 students who completed beginning and end of year surveys and assessments. The surveys included demographic questions, a validated expectancy-value scale, and questions about students' course experiences. The assessments were developed and validated by SRI International as a companion to the ECS course. Overall, student performance statistically increased from pretest to posttest with effect size of 0.74. There were no statistically significant differences in performance by gender or race/ethnicity. These results are consistent with earlier findings that a personally relevant course experience positively influences students' expectancy for success. These results expanded on prior research by indicating that students' expectancy-value for computer science positively influenced student learning.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {50–55},
numpages = {6},
keywords = {computer science assessment, computer science attitudes, computer science teaching practices, expectancy-value-cost, exploring computer science, high school computer science},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3628516.3655806,
author = {Iivari, Netta and Iversen, Ole Sejer and Smith, Rachel Charlotte and Schaper, Marie-Monique and Vent\"{a}-Olkkonen, Leena and Hartikainen, Heidi and Sharma, Sumita and Kinnula, Marianne and Lehto, Essi and Holappa, Jenni and Molin-Juustila, Tonja},
title = {Transformative agency – the next step towards children's computational empowerment},
year = {2024},
isbn = {9798400704420},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3628516.3655806},
doi = {10.1145/3628516.3655806},
abstract = {We suggest transformative agency is brought to the forefront of Participatory Design (PD) in Child-Computer Interaction (CCI) research to scaffold children's active engagement in matters related to digital technology and its effects on society. Based on Cultural-Historical Activity Theory we define children's transformative agency as their ability to actively change their own matters, their shared matters, or even societal matters for the better and more just society. We report on a framework for analyzing PD research with children and demonstrate how PD can support transformative agency of children through vignettes from two PD projects with children. Based on the vignettes, we provide a set of additional PD aims to consider when integrating the scaffolding of transformative agency explicitly in PD with children. A focus on children's transformative agency will contribute significantly to the maturing field of Computational Empowerment in CCI as an extension of the current PD work with children.},
booktitle = {Proceedings of the 23rd Annual ACM Interaction Design and Children Conference},
pages = {322–337},
numpages = {16},
keywords = {Children, Computational empowerment, Cultural-Historical Activity Theory, Design protagonist, Participatory design, Transformative agency},
location = {Delft, Netherlands},
series = {IDC '24}
}

@inproceedings{10.1145/2069618.2069694,
author = {Koh, Kyu Han and Bennett, Vicki and Repenning, Alexander},
title = {Computing indicators of creativity},
year = {2011},
isbn = {9781450308205},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2069618.2069694},
doi = {10.1145/2069618.2069694},
abstract = {Divergent thinking has been linked to creative processes leading to innovative artifacts. Measuring creative divergence can be difficult. Across the USA, the Scalable Game Design (SGD) Project includes thousands of student participants building their own games through learning computational thinking (CT). To evaluate these games, a technique, the Computational Thinking Pattern Analysis (CTPA) [1], was developed, refined and used successfully. Under three different learning conditions, divergence was computed through CTPA, and then analyzed and explored as an indication of creativity.},
booktitle = {Proceedings of the 8th ACM Conference on Creativity and Cognition},
pages = {357–358},
numpages = {2},
keywords = {computational thinking, computational thinking pattern analysis., creativity measurement, game design},
location = {Atlanta, Georgia, USA},
series = {C&amp;C '11}
}

@inproceedings{10.1145/3078072.3091990,
author = {Koracharkornradt, Chonnuttida},
title = {Tuk Tuk: A Block-Based Programming Game},
year = {2017},
isbn = {9781450349215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3078072.3091990},
doi = {10.1145/3078072.3091990},
abstract = {Studying computer programming helps children develop computational thinking, a problem-solving methodology that can be transferred to solve everyday problems. Additionally, exposing children to an advanced computational concept of search algorithm allows them to see how different problem-solving techniques are designed to tackle more challenging tasks, and improve their ability to solve problems. We present a block-based programming game called Tuk Tuk for children in kindergarten level (junior version), and elementary and middle school level (standard version). With Tuk Tuk, learners create a computer program in a block-based language to control a car to complete a given task, earn money, reach the next level, and unlock new coding blocks. By completing each task, learners will learn important computational concepts and algorithms, a basis of computational thinking, such as conditionals, iterations, depth-first search (DFS) and breadth-first search (BFS).},
booktitle = {Proceedings of the 2017 Conference on Interaction Design and Children},
pages = {725–728},
numpages = {4},
keywords = {block-based programming, game},
location = {Stanford, California, USA},
series = {IDC '17}
}

@inproceedings{10.1145/3287324.3287552,
author = {Freese, Joan and Benedict, Heather and Carter, Sarah and Hessen, Katie and Karl, Rita and Peterson, Karen and Scharber, Cassandra},
title = {SciGirls Code: Creative Robotics for Tween Girls in Out of School Time},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287552},
doi = {10.1145/3287324.3287552},
abstract = {This workshop introduces participants to SciGirls Code, a unique, connected learning model for engaging middle school girls in computer science (CS) in out of school time. The pilot project, which ran nationally at 16 sites across the United States in 2017-18, included: three curriculum strands (mobile apps, robotics, and e-textiles); role model training for female technology professionals; professional development for informal STEM educators; and a research study that investigates the ways in which learning experiences impact the development of girls' computational thinking as well as their interest and attitudes toward computer science. Workshop participants will learn best strategies for engaging girls in CS and see how those strategies play out in a creative robotics activity using Hummingbird robots. (See https://sites.google.com/tpt.org/scigirlscode/robotics/12-hummingbird-art-bot.)},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1238},
numpages = {1},
keywords = {app development, broadening participation, computational thinking, connected learning, curriculum, e-textiles, gender equity, middle school, professional development, robotics, role models},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3545945.3569883,
author = {Parham-Mocello, Jennifer and Erwig, Martin and Niess, Margaret and Weber, Jason and Smith, Madelyn and Berliner, Garrett},
title = {Putting Computing on the Table: Using Physical Games to Teach Computer Science},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569883},
doi = {10.1145/3545945.3569883},
abstract = {We describe a new introductory CS curriculum for middle schools that focuses on teaching CS concepts using the instructions and rules for playing simple, physical games. We deliberately avoid the use of technology and, in particular, programming, and we focus on games, such as tossing a coin to see who goes first and playing Tic-Tac-Toe. We report on middle-school students' understanding of basic CS concepts and their experiences with the curriculum.After piloting the curriculum in 6th and 7th grade electives, we found that students liked the curriculum and using games, while some other students reported struggling with the technical content in the algorithm unit and vocabulary across the curriculum. Overall, students gained an understanding of abstraction and representation, and most students could define an algorithm and recognize a condition. However, they could not correctly organize the instructions of an algorithm. Our results suggest that the non-coding, game-based curriculum engaged middle school students in basic CS concepts at the middle school level, but we believe there is room for improvement in delivering technical content and vocabulary related to algorithms.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {444–450},
numpages = {7},
keywords = {computational thinking, cs education, games, middle school, unplugged},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3373625.3417998,
author = {Mountapmbeme, Aboubakar and Ludi, Stephanie},
title = {Investigating Challenges Faced by Learners with Visual Impairments using Block-Based Programming/Hybrid Environments},
year = {2020},
isbn = {9781450371032},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3373625.3417998},
doi = {10.1145/3373625.3417998},
abstract = {With an increase in the use of block-based programming environments in k-12 curriculum, the need for accessibility exists in order to serve all students. Accessible block-based systems are in their infancy. Such systems would provide students with visual impairments the opportunity to learn programming and take part in computational thinking activities using the same systems that are found appealing to most sighted learners. However, with the presence of these systems little is known about their long-term use in the educational milieu. As a result, we conducted a survey with twelve teachers of students with visual impairments to learn about the use of these systems in teaching their students and to understand the barriers that students face in the learning process. Our study reveals that only one block-based programming environment is common among teachers and that several challenges exist. These challenges range from limited learners’ preparedness through difficulties editing and navigating code, to ineffective system feedback.},
booktitle = {Proceedings of the 22nd International ACM SIGACCESS Conference on Computers and Accessibility},
articleno = {73},
numpages = {4},
keywords = {Block-based programming, challenges, programming, visually impaired},
location = {Virtual Event, Greece},
series = {ASSETS '20}
}

@article{10.1145/2535915,
author = {Denning, Peter J.},
title = {Design thinking},
year = {2013},
issue_date = {December 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {56},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/2535915},
doi = {10.1145/2535915},
abstract = {Design thinking is the newest fashion for finding better solutions to problems. Combining it with computational thinking offers some real possibilities for improving software design.},
journal = {Commun. ACM},
month = dec,
pages = {29–31},
numpages = {3}
}

@inproceedings{10.1145/3328778.3372632,
author = {Greenwald, Eric and Krakowski, Ari},
title = {Coding Science Internships: Broadening Participation in Computer Science by Positioning Coding as a Tool for Doing Science},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372632},
doi = {10.1145/3328778.3372632},
abstract = {Computational tools, and the computational thinking (CT) involved in their use, are pervasive in science, supporting and often transforming scientific understanding. Yet, longstanding disparities in access to learning opportunities means that CT's growing role risks deepening persistent inequities in STEM [2]. To address this problem, our team developed and studied two 10-lesson instructional units for middle school science classrooms, each designed to challenge persistent barriers to equitable participation in STEM. The units aim to position coding as a tool for doing science, and ultimately, encourage a broader range of students, and females in particular, to identify as programmers. Students who participated (n=391) in a recent study of the units demonstrated statistically significant learning gains, as measured on an external assessment of CT. Learning gains were particularly pronounced for female students. Findings suggest that students can develop CT through instruction that foregrounds science, and in ways that lead to more equitable outcomes.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1336},
numpages = {1},
keywords = {broadening participation, coding to learn, computational science},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3362789.3362910,
author = {Gon\c{c}alves, Jos\'{e} and Lima, Jos\'{e} and Brito, Thadeu and Brancali\~{a}o, Laiany and Camargo, Caio and Oliveira, Vitor and Conde, Miguel \'{A}.},
title = {Educational Robotics Summer Camp at IPB: A Challenge based learning case study},
year = {2019},
isbn = {9781450371919},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3362789.3362910},
doi = {10.1145/3362789.3362910},
abstract = {Robotics in education has special relevance in current digital society where students should know how to deal with technology. In this paper, it is presented an educational experiment in the mobile robotics domain. The referred experiment was part of a summer camp, which took place at the Polytechnic Institute of Bragan\c{c}a Portugal, being its technological aspects related with mobile robotics. Other than the technological aspects, the students participated in many different cultural and social activities, having the opportunity to know the city of Bragan\c{c}a and also to know different persons, mainly students, professors, researchers and laboratory technicians. The applied approach in the summer camp was a challenge based learning methodology, being involved in the experiment 3 professors, 4 monitors, working with a group of 16 secondary school students. The described experiment was planned as an activity of the RoboSTEAM - Integrating STEAM and Computational Thinking development by using robotics and physical devices ERASMUS+ Project.},
booktitle = {Proceedings of the Seventh International Conference on Technological Ecosystems for Enhancing Multiculturality},
pages = {36–43},
numpages = {8},
keywords = {Challenge Based Learning, Erasmus, Robotics, Summer camp},
location = {Le\'{o}n, Spain},
series = {TEEM'19}
}

@inproceedings{10.1145/3313831.3376130,
author = {Yu, Junnan and Bai, Chenke and Roque, Ricarose},
title = {Considering Parents in Coding Kit Design: Understanding Parents' Perspectives and Roles},
year = {2020},
isbn = {9781450367080},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3313831.3376130},
doi = {10.1145/3313831.3376130},
abstract = {As education researchers, policymakers, and industry leaders recognize the importance of computing, many coding kits (toys and apps) have emerged to help young children learn to code at home. However, how parents perceive and support their children's use of the kits at home are less understood. In this study, we performed semi-structured interviews with eighteen parents who obtained coding kits for their young children for home use. The results show parents expected their kids to have fun and meaningful interactions with the kits. In supporting the play, parents took on various roles, mostly acting as spectator, scaffolder, and teacher. While parents perceived benefits of coding kits like a changed perspective on coding, they also reported concerns, such as their limited programming knowledge to provide help. Finally, we reflect on design and research implications to develop coding kits that consider parents' perspectives and important roles in supporting young children's exploration with computational thinking.},
booktitle = {Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems},
pages = {1–14},
numpages = {14},
keywords = {coding toys and kits, educational technology, informal learning, parent roles, parents' perspectives, young children},
location = {Honolulu, HI, USA},
series = {CHI '20}
}

@inproceedings{10.1145/3159450.3159537,
author = {Meysenburg, Mark and Durham Brooks, Tessa and Burks, Raychelle and Doyle, Erin and Frey, Timothy},
title = {DIVAS: Outreach to the Natural Sciences through Image Processing},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159537},
doi = {10.1145/3159450.3159537},
abstract = {The DIVAS (Digital Imaging and Vision Applications in Science) project addresses workforce challenges in science, technology, engineering, and mathematics by creating a pedagogical and programmatic "on-ramp" that empowers natural science majors to engage in authentic computational problems as members of skilled, professional teams. We are developing and testing institutional practices and curricular innovations that engage and train STEM undergraduate students to use Python programming, and image processing in particular, in their undergraduate research projects. Students are recruited into the DIVAS program in the first semester of their first year. DIVAS scholars and other participating students can experience a variety of interventions including: 1) a one-credit DIVAS seminar exploring several imaging and computing topics; 2) image capture and analysis modules in introductory- or upper-level biology and chemistry courses; 3) a week-long, intensive coding bootcamp that introduces bash, git, Python programming, and the OpenCV image processing library; 4) pair programming exercises to solve genuine morphometric and colorimetric problems; 5) an extended summer research project involving image processing; and 6) weekly code reviews to check on progress and provide guidance. The DIVAS projects measures the impact of these interventions on students' self-reported efficacy in using computation to solve problems, their attitudes towards computation, and their computational thinking skills, using both established and newly developed instruments. Our first year results show that multiple interventions have had significant positive impact on students' self-efficacy and interest in using computing in their future careers, and certain computational thinking skills.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {777–782},
numpages = {6},
keywords = {assessment, outreach, undergraduate instruction},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3368308.3415446,
author = {Sherwin, Kate and Winter, Victor},
title = {Filling an Educational Void with Spatial Thinking in the Online Age of Pandemics},
year = {2020},
isbn = {9781450370455},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3368308.3415446},
doi = {10.1145/3368308.3415446},
abstract = {COVID-19 has created challenges and opportunities for K-12 education. Advances in technology and changes to the delivery mode of educational content has provided opportunities to better integrate spatial thinking into curriculums. Such integration is of enormous value due to the centrality of spatial thinking within the STEM disciplines.},
booktitle = {Proceedings of the 21st Annual Conference on Information Technology Education},
pages = {350},
numpages = {1},
keywords = {computational thinking, mathematical thinking, spatial reasoning},
location = {Virtual Event, USA},
series = {SIGITE '20}
}

@inproceedings{10.1145/3287324.3293800,
author = {Scharber, Cassandra and Chang, Yu-Hui and Barksdale, Sarah and Peterson, Lana and Constantine, Angelina and Sivaraj, Ramya and Englund, Jennifer},
title = {SciGirls Code: Computational Participation for Middle School Girls},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293800},
doi = {10.1145/3287324.3293800},
abstract = {SciGirls Code is a project which used the principles of connected learning with 16 STEM outreach partners to provide 160+ middle school girls with computational thinking (CT) and coding skills within informal education spaces. Programs completed 3 curricular strands (Mobile Apps, Robotics, E-Textiles) between September 2017-May 2018. SciGirls Code integrates a computational participation framework with connected learning. The research study investigates the ways in which computational learning experiences impact girls' development of CT; interest and attitudes toward computer science; and their understanding of how participation in technology creation impacts themselves and the world around them. This study utilizes an interpretive multi-site case study design. There are multiple data sources with different data collected at focal and participating sites. The seven (7) focal cases represent an array of settings (rural, suburban, urban) as well as a variety of programming contexts (museums, community centers, after school). The remaining nine (9) sites comprise the participating cases. Notably, interviews (in-person) from focal sites and shorts (videos) from participating sites were collected at three moments in the programming (beginning, middle, end) to document changes in understandings and skills. Content analysis was conducted, and further triangulated in teams, to develop themes for each case and cross-case comparison. Thus far, the study has found that a connected learning approach boosted the development of middle school girls' CT skills, positively impacted attitudes towards computing pathways/careers, and increased understandings of computational participation.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1273},
numpages = {1},
keywords = {case studies, computational participation, computational thinking, connected learning, gender},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3572549.3572558,
author = {Wang, Meijuan and Wang, Yibin and Li, Hui},
title = {Exploration of a Blended Teaching Mode for the Cultivation of High-Order Computing Ability},
year = {2023},
isbn = {9781450397766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3572549.3572558},
doi = {10.1145/3572549.3572558},
abstract = {The rapid development of information technology has a great influence on the future society. Future talents should have high-order thinking skills, such as adaptability, competence, and innovation, suitable for specific positions. Military universities undertake the important task of cultivating military talent. This work highlights the cultivation of students’ computing thinking ability in the course “The Fundamentals of Computer.” By carefully planning teaching time and content and using modern information technology and rich network teaching resources, the reform of online–offline blended teaching is practiced. The new teaching mode features high-order thinking skills training for students and realizes the transformation of the curriculum from knowledge output to high-order thinking ability orientation.},
booktitle = {Proceedings of the 14th International Conference on Education Technology and Computers},
pages = {51–57},
numpages = {7},
keywords = {The fundamentals of computer, blended teaching, computational thinking, high-order thinking skills},
location = {Barcelona, Spain},
series = {ICETC '22}
}

@inproceedings{10.1145/2513456.2513500,
author = {Trimble, John and Keeling, Harry},
title = {Comparative paradigms in the examination of software production},
year = {2013},
isbn = {9781450321129},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2513456.2513500},
doi = {10.1145/2513456.2513500},
abstract = {Different paradigms are used to study socioeconomic dynamics of the software development process. The study seeks to examine the software development process at the project, firm national, and international level. Three paradigms are selected to pursue this examination: 1) dialectical and historical materialism; 2) computational thinking; and 3) system dynamics. This approach of employing multiple paradigms is designed to develop a comprehensive but cohesive presentation of possible software production scenarios.},
booktitle = {Proceedings of the South African Institute for Computer Scientists and Information Technologists Conference},
pages = {341–346},
numpages = {6},
keywords = {computational thinking, information systems, materialism, software development, system dynamics},
location = {East London, South Africa},
series = {SAICSIT '13}
}

@inproceedings{10.1145/3627217.3627232,
author = {Murali, Ritwik and Sukumar, Rajkumar and Sanjana Gali, Mary and Avudaiappan, Veeramanohar},
title = {Empowering Novice Programmers with Visual Problem Solving tools},
year = {2023},
isbn = {9798400708404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3627217.3627232},
doi = {10.1145/3627217.3627232},
abstract = {Learning one’s first programming language includes challenges of syntax, surplus code and semantics. The learning can be easy or quite hard for a novice programmer depending on the programming language. Even the small “Hello World” program code contains semantic and syntactic complexity. This paper discusses the pros and cons of multiple tools that may be used for syntax independent implementation of solutions. Based on the shortcomings of existing tools, Flowgramming – a platform independent flowcharting software for the novice programmer / problem solver and their instructor, is also proposed in the paper. Flowcharts developed using Flowgramming can be executed by the built-in interpreter which helps the novice programmer focus on understanding the problem solving strategy in a visually appealing manner and also allows for a language independent learning of solution strategies.},
booktitle = {Proceedings of the 16th Annual ACM India Compute Conference},
pages = {100–103},
numpages = {4},
keywords = {Computational Thinking, Education Technologies, Flowchart, Introductory Programming, Problem Solving, Visual Learning},
location = {Hyderabad, India},
series = {COMPUTE '23}
}

@article{10.5555/3280489.3280532,
author = {Kafura, Dennis and Erlinger, Michael},
title = {National science foundation - NSF},
year = {2018},
issue_date = {October 2018},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {34},
number = {1},
issn = {1937-4771},
abstract = {Dennis Kafura will describe his experience in obtaining NSF funding to support the development and improvement of a general education Computational Thinking course. The funding was from NSF's TUES/EAGER and IUSE programs. The research developed technology for a scaffolded data science context, an infrastructure for feedback directed at student misconceptions, and interactive visualizations. A variety of assessment techniques were used including ethnographic studies, surveys, interviews, and a three-semester quasi-experiment.},
journal = {J. Comput. Sci. Coll.},
month = oct,
pages = {262},
numpages = {1}
}

@inproceedings{10.1145/3556787.3556860,
author = {Greifenstein, Luisa and Gra\ss{}l, Isabella and Heuer, Ute and Fraser, Gordon},
title = {Common Problems and Effects of Feedback on Fun When Programming Ozobots in Primary School},
year = {2022},
isbn = {9781450398534},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3556787.3556860},
doi = {10.1145/3556787.3556860},
abstract = {Computational thinking is increasingly introduced at primary school level, usually with some form of programming activity. In particular, educational robots provide an opportunity for engaging students with programming through hands-on experiences. However, primary school teachers might not be adequately prepared for teaching computer science related topics, and giving feedback to students can often be challenging: Besides the content of the feedback (e.g., what problems have to be handled), the way the feedback is given is also important, as it can lead to negative emotional effects. To support teachers with the way of giving feedback on common problems when teaching programming with robotics, we conducted a study consisting of seven workshops with three third and four fourth grade primary school classes. Within seven different activities, the 116 primary school children first programmed the Ozobot Evo robot in the pen-and-paper mode and then on a digital device. Throughout these activities we collected data on the problems the students encountered, the feedback given, and the fun they experienced. Our analysis reveals eight categories of problems, which we summarise in this paper together with corresponding possible feedback. We observed that problems that are urgent or can harm the students’ self-efficacy have a negative impact on how enjoyable an activity is perceived. While direct instruction significantly decreased the experienced fun, hints had a positive effect. Generally, we found programming the Ozobot Evo to be encouraging for both girls and boys. To support teachers, we discuss ideas for giving encouraging feedback on common problems of Ozobot Evo programming activities and how our findings transfer to other robots.},
booktitle = {Proceedings of the 17th Workshop in Primary and Secondary Computing Education},
articleno = {5},
numpages = {10},
keywords = {Robotics, Primary Education, Physical Programming, Ozobot Evo, Motivation, Interest, Fun, Feedback, Block-based programming},
location = {Morschach, Switzerland},
series = {WiPSCE '22}
}

@article{10.5555/3417699.3417702,
author = {Russell, Ingrid and Rosiene, Carolyn Pe and Gold, Aaron},
title = {Incorporating Arduino labs into a CS0 course},
year = {2020},
issue_date = {April 2020},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {35},
number = {10},
issn = {1937-4771},
abstract = {As part of our University's efforts to integrate high impact practices into the undergraduate curriculum, the Computing Sciences Department developed a model for revitalizing an introductory computer science course for non-majors. The overarching goal of our efforts is to enhance the learning experiences in the course by applying and relating fundamental computational thinking concepts of algorithmic reasoning, data representation, and computational efficiency to real-world problems in the context of an embedded system, the Arduino. The Arduino platform provides a rich opportunity to engage students by showing broad applications of computing in domains that are part of their daily lives, thus introducing computing in a way that may improve student retention rates and encourage broader participation in computer science and engineering. Using this Arduino module in the course, we address two of the five main course objectives set forth for the course. Assessment results show that the approach has been effective. We present our experiences using the curricular material, as well as assessment results.},
journal = {J. Comput. Sci. Coll.},
month = apr,
pages = {21–26},
numpages = {6}
}

@inproceedings{10.1145/3017680.3017765,
author = {Butler, Zack and Bezakova, Ivona and Fluet, Kimberly},
title = {Pencil Puzzles for Introductory Computer Science: an Experience- and Gender-Neutral Context},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3017765},
doi = {10.1145/3017680.3017765},
abstract = {The teaching of introductory computer science can benefit from the use of real-world context to ground the abstract programming concepts. We present the domain of pencil puzzles as a context for a variety of introductory CS topics. Pencil puzzles are puzzles typically found in newspapers and magazines, intended to be solved by the reader through the means of deduction, using only a pencil. A well-known example of a pencil puzzle is Sudoku, which has been widely used as a typical backtracking assignment. However, there are dozens of other well-tried and liked pencil puzzles available that naturally induce computational thinking and can be used as context for many CS topics such as arrays, loops, recursion, GUIs, inheritance and graph traversal. Our contributions in this paper are two-fold. First, we present a few pencil puzzles and map them to introductory CS concepts that the puzzles can target in an assignment, and point the reader to other puzzle repositories which provide the potential to lead to an almost limitless set of introductory CS assignments. Second, we have formally evaluated the effectiveness of such assignments used at our institution over the past three years. Students reported that they have learned the material, believe they can tackle similar problems, and have improved their coding skills. The assignments also led to a significantly higher proportion of unsolicited statements of enjoyment, as well as metacognition, when compared to a traditional assignment for the same topic. Lastly, for all but one assignment, the student's gender or prior programming experience was independent of their grade, their perceptions of and reflection on the assignment.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {93–98},
numpages = {6},
keywords = {pencil puzzles, learning in context, introductory cs concepts, computational thinking},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/3446871.3469797,
author = {He, Fangqing and Chang, Yumih and Li, Yinmiao and Du, Mingnan and Chen, Qianyi},
title = {Programmable Little Red: A Multi-thread Immersive and Interactive Storytelling Approach to Learning Conditional Statements},
year = {2021},
isbn = {9781450383264},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3446871.3469797},
doi = {10.1145/3446871.3469797},
abstract = {Traditional methods of learning conditional statements follow lecture-based instruction, which focuses on teaching concepts and definitions. While this traditional method of instruction is the dominant teaching style in Computer Science (CS) education, it has also been identified to be one of the least effective methods for teaching and engaging students [3]. The existing limitations of traditional methods include low engagement, disconnection from the real-world applications, a lack of valuable artifacts to evaluate the learning outcomes. To improve the learning methods of conditional statements stated above, we asked the following two questions: RQ1: Can storytelling logic, an early development logic, be a viable tool that translates the concept of condition followed by a consequence to the logic of conditional statements? RQ2: In what approaches can we apply the isomorphic relationship between the two logics to the learning of conditional statements? The research project proposes a multi-thread storytelling method that mimics the logic of conditional statements. As students develop new storylines, they create new conditions and the consequences under the conditions. Through active involvement in the storyline design, development, and presentation, students will be able to grasp the concept of conditional statements by applying the theoretical programming knowledge to daily life situations embedded within the story. In addition, the interactive scenes created by students are ideal artifacts for learning outcome evaluation. Based on the computational thinking phases proposed by Repenning et al. [2] which is composed of Problem Formulation (Abstraction), Solution Expression (Automation) and Solution execution and evaluation (Analysis), we design a learning system that allows students to learn conditional statements in the context of multi-thread storytelling. A 4-day workshop was developed and hosted to assess the proposed learning system with 6 children aged 11-12 years old. Based on the classic fairy tale Little Red Riding Hood, a story world is built up in the classroom by integrating stage design and sensory-based physical interactions. An immersive and interactive story with a tragic ending is intentionally built by the instructors and students are invited to experience the instructor-developed storyline. Sensor-based choice-making interactions are embedded in the experience to imply that the choices students make will directly impact the outcome of the story. Students are asked to recall moments that different choices can be made to save the main character, design sensor-based interactions that allow opportunities to make choices, create new storylines, code with conditional statements, and present to the class.Based on Brennan and Resnick’s “three approaches to assessing the development of computational thinking in young people” [1], we evaluated students’ learning outcomes through 1) codes written by students to exam the implementation of the interactive tasks, and overall functionality of conditional statements 2) post-interview on storyline design and real-world applications of conditional statements 3) an activity on design scenarios requiring students to explain, debug and remix a Scratch project developed by the instructors. Throughout the workshop, students have distinguished performances in Problem Formulation (Abstraction) and Solution Expression (Automation). Intrigued by the immersive story experience, students were able to identify the opportunities for choice-making, brainstorm conditions and consequences, self-evaluate their proposals. Furthermore, the codes written by the students during the workshop and the post-activity also indicate students’ capability to implement their proposed solutions utilizing conditional statements with the facilitation of the instructors. Students delivered positive feedback in the interview on the last day of the workshop, mentioning that the experience of this workshop even changed their perception of CS education and the application of sensory technologies in real life.},
booktitle = {Proceedings of the 17th ACM Conference on International Computing Education Research},
pages = {450–451},
numpages = {2},
keywords = {tangible UIs, storytelling, participatory design, creativity support},
location = {Virtual Event, USA},
series = {ICER 2021}
}

@inproceedings{10.1145/3408877.3439539,
author = {Hinckle, Madeline and Catete, Veronica and Lytle, Nicholas and Barnes, Tiffany and Wiebe, Eric},
title = {Agile Curriculum Development: Computational Modeling COVID-19},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439539},
doi = {10.1145/3408877.3439539},
abstract = {Computational modeling provides an excellent vehicle for raising scientific awareness of emergent and topical phenomena such as COVID-19. Now more than ever, it is crucial to provide students with factual information about how diseases spread and how their own actions can impact that spread. In order to both encourage computational thinking skills and build scientific knowledge of the COVID-19 pandemic, we have created a series of programming activities through which students construct their own computational models based on the emerging scientific consensus around COVID-19. Students are able to model everyday situations such as being in a crowded area or going to stores while unknowingly infected, and immediately see the consequences of those actions. By including accurate scientific variables such as the reproductive number of the virus, incubation period, and period of communicability, students are able to create their own epi-curves that demonstrate the severity of the disease and provide students with visual representation of how quickly COVID-19 spreads. We also use the scientific model and associated modeling activities to reinforce best practices at home and in the community. Finally, this curriculum development effort demonstrates how block-based computational modeling activities lend themselves to agile curricular re-design around emerging and topics of local interest},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1377},
numpages = {1},
keywords = {middle grades, k-12, computational modeling, block-based coding},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3105726.3106186,
author = {Snow, Eric and Rutstein, Daisy and Bienkowski, Marie and Xu, Yuning},
title = {Principled Assessment of Student Learning in High School Computer Science},
year = {2017},
isbn = {9781450349680},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3105726.3106186},
doi = {10.1145/3105726.3106186},
abstract = {As K-12 computer science (CS) initiatives scale throughout the U.S., educators face increasing pressure from their school systems to provide evidence about student learning on hard-to-measure CS outcomes. At the same time, researchers studying curriculum implementation and student learning want reliable measures of how students apply their CS knowledge. This paper describes a two-year validation study focused on end-of-unit and cumulative assessments for Exploring Computer Science, an introductory high school CS curriculum. To develop the assessments, we applied a principled methodology called Evidence-Centered Design (ECD) to (1) work with various stakeholders to identify the important computer science skills to measure, (2) map those skills to a model of evidence that can support inferences about those skills, and (3) develop assessment tasks that elicit that evidence. Using ECD, we created assessments that measure the practices of computational thinking, in contrast to assessments that only measure CS conceptual knowledge. We iteratively developed and piloted the assessments with 941 students over two years and collected three types of validity evidence based on contemporary psychometric standards: test content, internal structure, and student response processes. Results show that reliability was moderate to high for each of the unit assessments; the assessment tasks within each assessment are well aligned with each other and with the targeted learning goals; and average scores were in the 60 to 70 percent range. These results indicate that the assessments validly measure students' computational thinking practices covered in the introductory CS curriculum. We discuss the broader issues we faced of balancing the need to use the assessment results for evaluation and research, and demands from teachers for use in the classroom.},
booktitle = {Proceedings of the 2017 ACM Conference on International Computing Education Research},
pages = {209–216},
numpages = {8},
keywords = {test validity, high school computer science, computational thinking practices, assessment},
location = {Tacoma, Washington, USA},
series = {ICER '17}
}

@inproceedings{10.1145/3626253.3635338,
author = {Hu, Anne Drew and Yadav, Aman},
title = {Integrating Critical Analysis of Society and Technology into K-12 Computing Through Teacher Co-Design},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635338},
doi = {10.1145/3626253.3635338},
abstract = {As demand for K-12 computer science (CS) education grows, we argue that most students would be best served by CS classes that not only teach computational thinking/programming, but also challenge them to critically analyze the role of technology in society. One of the main barriers to implementing this into K-12 classrooms is a lack of research on how in-service CS teachers can integrate critical pedagogy into their school context and existing curricula. This lightning talk presents a proposed method to co-design lessons with current K-12 CS teachers to integrate critical perspectives into their classrooms. Teacher participants will join a synchronous summer professional development where we will teach them critical computing content drawn from relevant books and frameworks, and collaborate with them to design or modify lessons that will engage their students in critical analysis. Teachers will be encouraged to include content relevant to their communities. For example, a teacher in Detroit might teach facial recognition in the context of continued use of the technology by police, despite wrongful arrests. Results from this work will inform future sociocultural content integration into K-12 CS courses (e.g. "ethics content"). Feedback from the audience will be used to improve the methods and literature review of the study.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1934},
numpages = {1},
keywords = {computing education, critical theory, ethics, k-12 cs},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3383668.3429672,
author = {Kumar, Vishesh and Berland, Matthew and Lyons, Leilah and Cannady, Matthew A. and McKinney de Royston, Maxine},
title = {Designing for and Identifying Plural Goals in a Science Museum Game Exhibit},
year = {2020},
isbn = {9781450375870},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3383668.3429672},
doi = {10.1145/3383668.3429672},
abstract = {Science museums are often interactive spaces where a variety of visitors engage with exhibits in diverse ways. While trying to support participants? behavior in ways that make intuitive sense for these behaviors in a museum context, these exhibits need to support interests and participation in forms that are meaningfully diverse - to make domains accessible to learners belonging to groups minoritized in those domains. In this paper, we present an interactive computational thinking exhibit designed to foster a multiplicity of goals and participatory behaviors. We also present preliminary analysis on how we can use play data to delineate the pursuit of different goals mediated through different pursuits. We also find care to be a uniquely valuable aesthetic motivator in gameplay, often overlooked in common design frameworks - with potential to expand perspectives on computing and combat inequity among computing learners.},
booktitle = {Extended Abstracts of the 2020 Annual Symposium on Computer-Human Interaction in Play},
pages = {292–296},
numpages = {5},
keywords = {science museums, play styles, museums, learning analytics, games, game design, data mining, computer science education, cluster analysis},
location = {Virtual Event, Canada},
series = {CHI PLAY '20}
}

@inproceedings{10.1145/3585088.3593929,
author = {Adisa, Ibrahim Oluwajoba},
title = {Developing Machine Learning Agency Among Youth: Investigating Youth Critical Use, Examination, and Production of Machine Learning Applications},
year = {2023},
isbn = {9798400701313},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3585088.3593929},
doi = {10.1145/3585088.3593929},
abstract = {Abstract. Young people are surrounded by machine learning (ML) devices and their lived experiences are increasingly shaped by the ML technologies that are ever-present in their lives. As innovations in machine learning technologies continue to shape society, it raises important implications for what young people learn, their career trajectories, and the required literacies they need to thrive in this changing occupational environment. Youth are particularly vulnerable to the impact of ML and very little has been done to empower them to critically engage in the discourse surrounding the next generation of technologies that have a marked potential to shape their lives for better or worse. My dissertation work seeks to develop youth autonomy and agency around ML by designing an intervention that supports youth critical use, examination, and production of ML applications in the context of promoting self-expression and social good. I will conduct a qualitative single case study research and collect multiple forms of data using interviews, story completions, digital artifacts, observations, and focus group discussions. These data sources will allow me to conduct an intensive analysis and investigation of how youth populations can be supported to develop the skills, practices and critical consciousness needed to effectively engage with machine learning technologies. Through my research, I also hope to advance the literature on how young people creatively collaborate with ML and use ML for self-expression.},
booktitle = {Proceedings of the 22nd Annual ACM Interaction Design and Children Conference},
pages = {781–784},
numpages = {4},
keywords = {agency, computational thinking, machine learning, youth},
location = {Chicago, IL, USA},
series = {IDC '23}
}

@inproceedings{10.1145/2462476.2462479,
author = {Zur-Bargury, Iris and P\^{a}rv, Bazil and Lanzberg, Dvir},
title = {A nationwide exam as a tool for improving a new curriculum},
year = {2013},
isbn = {9781450320788},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2462476.2462479},
doi = {10.1145/2462476.2462479},
abstract = {Israel's Ministry of Education has decided to strengthen the STEM studies, including computer science (CS). A new curriculum for CS for junior high, which focuses on developing computational thinking, was developed, implemented, and evaluated. The evaluation contains a nationwide test at the end of each year. This paper describes the 2012 nationwide exam and its evaluation.},
booktitle = {Proceedings of the 18th ACM Conference on Innovation and Technology in Computer Science Education},
pages = {267–272},
numpages = {6},
keywords = {technology, stem learning, problem solvingy, k-12 curricula, computing educationy, computer science, computational thinking},
location = {Canterbury, England, UK},
series = {ITiCSE '13}
}

@inproceedings{10.1145/2930674.2930678,
author = {Unnikrishnan, R. and Amrita, N. and Muir, Alexander and Rao, Bhavani},
title = {Of Elephants and Nested Loops: How to Introduce Computing to Youth in Rural India},
year = {2016},
isbn = {9781450343138},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2930674.2930678},
doi = {10.1145/2930674.2930678},
abstract = {We present Haathi Mera Saathi (My Elephant Friend), a game concept which serves as a tool for teaching programming and computational thinking to underprivileged children in rural India. It provides a metaphor and gameplay for embodied and tangible games, and creates a soft early ramp up into the conceptual and digital space of learning to code. We discuss the urgency of digital inclusion for Indian rural children, with reference to technology as an amplifier which they need to learn to direct. We contrast the grounded, embodied style of Haathi Mera Saathi with the current crop of mini-languages and coding games, with particular emphasis on the need for physicality and tangibility in the very early stages of learning to code. We further discuss our experience conducting workshops for students from the tribal and rural belts of India, where we see HMS as an effective approach for taking them from a state of having no background in computers or computing, to a state where they create interactive applications in a Java based environment. Recommendations are given for researchers interested in working with rural village children.},
booktitle = {Proceedings of the The 15th International Conference on Interaction Design and Children},
pages = {137–146},
numpages = {10},
keywords = {tangible games, Third World, ICT4D, ICD, HCI4D, Digital Divide, Computational thinking},
location = {Manchester, United Kingdom},
series = {IDC '16}
}

@inproceedings{10.1145/3615430.3615432,
author = {Samuelsson, Robin},
title = {A pedagogy of tinkering: The pedagogical values of productive failure in childhood programming education},
year = {2024},
isbn = {9798400708961},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3615430.3615432},
doi = {10.1145/3615430.3615432},
abstract = {Programming is increasingly becoming a subject across the spectrum of educational environments for preschool children. Concerns have been raised regarding a too instrumental and uncritical implementation of programming. This study follows a preschool and reports on the obstacles infused during a six-month design-based study introducing a programmable floor robot with children, featuring formative focus group sessions and pedagogical development. An activity theoretical approach was taken to examine the various tensions with existing pedagogies that arose during the project and how these led to pedagogical development toward a programming ethos based on making pedagogical materials and tinkering activities, where failure is an inherent part of the educational process. The paper discusses the potential problems of using new subjects with current curricula and how new technologies are part of reshaping childhood pedagogies.},
booktitle = {Proceedings of FabLearn / Constructionism 2023: Full and Short Research Papers},
articleno = {12},
numpages = {3},
keywords = {Computational thinking, early childhood education, making, pedagogical development},
location = {New York City, NY, USA},
series = {FLC '23}
}

@inproceedings{10.1145/3408877.3439595,
author = {Peterfreund, Alan and Esaison, Jordan and Smith, Julie M. and Johnston, Brianna},
title = {Computer Science Education Graduate Students: Defining a Community and Its Needs},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439595},
doi = {10.1145/3408877.3439595},
abstract = {As undergraduate enrollment in computer science (CS) courses continues to expand, concerns surrounding the supply of instructors and the quality of instruction become even more salient. Similarly, computing education and computational thinking programs are expanding in K12 schools but are hampered by concerns over teacher training and curriculum efficacy. This project sought to answer a question: is there a need for a more robust system of networking and resources for computer science education (CSEd) graduate students' The large response to initial community-building efforts indicates that this is likely the case. In just over one year, a global community of 190 graduate students and 90 CS faculty researchers and advisors have registered for a CSEd graduate focused community. Participant funding, while originally intended for in-person conference attendance and face-to-face meetings, has enabled this project to create study groups attended by 73 students and a virtual conference with 101 participants. These activities were established as a result of a needs assessment survey conducted in early 2020. This poster documents the rapid growth of this community and the need students feel for systematic support.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1337},
numpages = {1},
keywords = {graduate students, cs education, computing education},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3084863.3107579,
author = {Reiser, Susan and Conrad, Phill},
title = {A processing primer for artists},
year = {2017},
isbn = {9781450350099},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3084863.3107579},
doi = {10.1145/3084863.3107579},
abstract = {Processing is an open source programming language and Integrated Development Environment (IDE) developed by Casey Reas and Ben Fry. This workshop is a hand-on programming primer for artists and designers who are interested in using programming and computational thinking as creative tools.},
booktitle = {ACM SIGGRAPH 2017 Studio},
articleno = {1},
numpages = {2},
keywords = {processing, computing in the arts, computer graphics programming},
location = {Los Angeles, California},
series = {SIGGRAPH '17}
}

@inproceedings{10.1145/2538862.2538925,
author = {Heintz, Fredrik and Erlander Klein, Inger},
title = {The design of Sweden's first 5-year computer science and software engineering program},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538925},
doi = {10.1145/2538862.2538925},
abstract = {In 2013 Link\"{o}ping University started the first 5-year engineering program in Computer Science and Software Engineering in Sweden. The goals of the program are to provide a holistic perspective on modern large scale software development, to provide a deep and broad understanding of computer science and computational thinking, and encourage innovation and entrepreneurship. The student response has been very good with more than 600 applicants to the 30 slots, of which more than 130 had this program as their first choice among all programs in Sweden. In this paper we present the goals, the design principles, and the resulting program. The ACM/IEEE CS Curricula has been used to make sure that the program provides a solid foundation in Computer Science. Three pedagogical ideas that we have used are (1) project courses to integrate theory and practice as well as provide experience with the most common form of working in industry; (2) courses that cover multiple programming paradigms and languages as well as multiple software development methodologies so that the students are prepared to take on the continual changes we know will come; and (3) a special course in engineering professionalism with groups of students from the first three years together reflecting on topics related to being a professional engineer. The paper concludes with a discussion about some important aspects such as computational thinking and the relation to the ACM/IEEE CS Curricula.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {199–204},
numpages = {6},
keywords = {software engineering, computer science education, computational thinking},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/3626253.3631656,
author = {Grover, Shuchi and Fields, Deborah and Kafai, Yasmin and White, Shana and Strickland, Carla},
title = {Enduring Lessons from 'Computer Science for All' for AI Education in Schools},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3631656},
doi = {10.1145/3626253.3631656},
abstract = {Even as efforts to promote K-12 CS education forge ahead, there is a growing consensus that students must also be taught artificial intelligence (AI) and machine learning (ML) in order to be prepared for the fast-changing world powered by AI/ML. How can ensure that we leverage learnings from two decades of CS education research and practice, and build on successes while mitigating missteps? This panel invites researchers with deep expertise in 'CSForAll' efforts for a timely discussion and sharing of valuable lessons from CS education efforts about pedagogies, attention to equity, and teacher preparation that will also benefit K-12 AI education.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1533–1534},
numpages = {2},
keywords = {artificial intelligence, computational thinking, equity, k-12 ai education, k-12 cs education, machine learning, project-based learning, teacher preparation},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/2593968.2610490,
author = {Agrawal, Harshit and Jain, Rishika and Kumar, Prabhat and Yammiyavar, Pradeep},
title = {FabCode: visual programming environment for digital fabrication},
year = {2014},
isbn = {9781450322720},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2593968.2610490},
doi = {10.1145/2593968.2610490},
abstract = {In this paper, we introduce FabCode, a visual programming environment using which one can create designs that can be manufactured using digital fabrication techniques like 3D printing and laser cutting. This project is primarily about making accessible and enhancing the kinds of "thinking" that the computational medium is capable of supporting and spreading. FabCode is situated in the context of design and engineering of objects, and is based on the premise that programming 3D models for personal fabrication would enable practice of computational thinking for the same. Children will learn as they work on personally meaningful projectsbuilding, describing, printing and playing with things, and debugging and discussing their processes and outcomes. It will be a childcentered, constructionist tool for FabLabs.},
booktitle = {Proceedings of the 2014 Conference on Interaction Design and Children},
pages = {353–356},
numpages = {4},
keywords = {visual programming, digital fabrication, constructionism, computational thinking, blockly, 3d modeling},
location = {Aarhus, Denmark},
series = {IDC '14}
}

@inproceedings{10.1145/3361721.3362110,
author = {Lytle, Nicholas and Catete, Veronica and Isvik, Amy and Boulden, Danielle and Dong, Yihuan and Wiebe, Eric and Barnes, Tiffany},
title = {From 'Use' to 'Choose': Scaffolding CT Curricula and Exploring Student Choices while Programming (Practical Report)},
year = {2019},
isbn = {9781450377041},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3361721.3362110},
doi = {10.1145/3361721.3362110},
abstract = {As computing skills become necessary for 21st-century students, infused computational thinking (CT) lessons must be created for core courses to truly provide computing education for all. This will bring challenges as students will have widely varying experience and programming ability. Additionally, STEM teachers might have little experience teaching CT and instructing using unfamiliar technology might create discomfort. We present a design pattern for infused CT assignments that scaffold students and teachers into block-based programming environments. Beginning with existing code, students and teachers work together 'Using' and comprehending code before 'Modifying' it together to fix their programs. The activity ends with students 'Choosing' their own extensions from a pre-set list. We present a comparison of two implementations of a simulation activity, one ending with student choosing how to extend their models and one having all students create the same option. Through triangulating data from classroom observations, student feedback, teacher interviews, and programming interaction logs, we present support for student and teacher preference of the 'Student-Choice' model. We end with recommended strategies for developing curricula that follow our design model.},
booktitle = {Proceedings of the 14th Workshop in Primary and Secondary Computing Education},
articleno = {18},
numpages = {6},
keywords = {Use-Modify-Create, Student Choice, Lesson Design},
location = {Glasgow, Scotland, Uk},
series = {WiPSCE '19}
}

@inproceedings{10.1145/3408877.3432532,
author = {Rorrer, Audrey and Pugalee, David and Edwards, Callie and Boulden, Danielle and Maher, Mary Lou and Cao, Lijuan and Dorodchi, Mohsen and Catete, Veronica and Frye, David and Barnes, Tiffany and Wiebe, Eric},
title = {The Design and Implementation of a Method for Evaluating and Building Research Practice Partnerships},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432532},
doi = {10.1145/3408877.3432532},
abstract = {We have established a research-practice partnership (RPP) to build a computer science (CS) and computational thinking (CT)-focused STEM ecosystem at two middle schools. Creating such an ecosystem to broaden student participation in computing through an RPP approach involves all stakeholders in the research process. Borrowing upon visual participatory research methods, we developed a graphic research instrument to engage teachers in the research process and elicit their perspectives on strategies for building the ecosystem. This experience report describes our research methodology across two distinct cases to demonstrate the utility of this drawing activity as an investigative and partnership development tool. The contribution is in offering a flexible approach to other university-based RPP teams that enables a synergistic partnership development tool and data collection instrument that can be tailored to a variety of RPP contexts, facilitating more productive and equitable ways of engaging stakeholders in the research process. We describe our project contexts and share results from the pilot study with practitioner-members of our RPP teams. We discuss two cases to highlight the contribution this approach made to the development of our partnerships.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {753–759},
numpages = {7},
keywords = {research-practice partnerships, qualitative measures, program evaluation, design-based research},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3401861.3401870,
author = {Yao, Dunhong and Mi, Chunqiao and Zhang, Wen},
title = {A Teaching Reform and Practice to Improve Student's Ability of Practice and Innovation in Computer Major},
year = {2020},
isbn = {9781450377423},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3401861.3401870},
doi = {10.1145/3401861.3401870},
abstract = {Local colleges should cultivate high-quality IT applied talents, the key is to cultivate the students' ability of practice and innovation. In order to cultivate these abilities, we put forward a set of effective solutions, which is to improve the teaching quality of programming courses and strengthen the practical teaching link of programming courses. To this end, we implemented a series of teaching reforms, including refactoring talent training plan and practical teaching system, setting up the programming courses' teaching team, enhancing the teaching team's teaching level and practice guiding ability, building a personalized teaching auxiliary platform, building three-dimensional and network teaching resources, building school's innovative practice base, implementing three-dimensional and deep project education program, and establishing the operation mechanism of joint examination of programming courses. Since the implementation of the reform, we have achieved excellent results, including improving the quality of course teaching, and improving students' ability of computational thinking, programming practice, employment quality, and the ability of science and technology to serve society.},
booktitle = {Proceedings of the 2020 2nd International Conference on Modern Educational Technology},
pages = {10–14},
numpages = {5},
keywords = {Teaching Reform, Programming Courses, Practical and Innovation Ability},
location = {Singapore, Singapore},
series = {ICMET '20}
}

@inproceedings{10.1145/3294109.3300997,
author = {Sullivan, Anne and Johnson, Emily K.},
title = {BeadED Adventures: Crafting STEM Learning},
year = {2019},
isbn = {9781450361965},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3294109.3300997},
doi = {10.1145/3294109.3300997},
abstract = {With the move towards digital interventions for educational purposes, there has been a loss of tangible and material interfaces, the consequences of which are still being understood. Meanwhile, there is an ongoing lack of gender diversity within STEM-facing majors and careers. In response to this, we have created a physical prototype of BeadED Adventures, a system that uses a physical controller made up of jars of colorful beads to control modified Twine games that follows constructivist philosophies of learning and emphasizes player autonomy. By controlling the experience, the player creates a beaded bracelet that is personalized based on their choices within the game. In addition to the controller, we are creating an educational Twine game in which the player explores an abandoned castle, solving computational thinking puzzles to escape.},
booktitle = {Proceedings of the Thirteenth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {351–358},
numpages = {8},
keywords = {tangible learning artifact, tangible interfaces, stem learning, games, educational games, crafts, crafting games},
location = {Tempe, Arizona, USA},
series = {TEI '19}
}

@inproceedings{10.1145/3545945.3569748,
author = {Gupta, Ankur and Rybarczyk, Ryan},
title = {Improving Long Term Performance Using Visualized Scope Tracing: A 10-Year Study},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569748},
doi = {10.1145/3545945.3569748},
abstract = {Code tracing (or program sketching) is a useful technique for both students and professionals to understand syntactic and semantic details of code. Emphasizing and exploring this skill leads students to a deep understanding of their code in the short term and ultimately, their evolution into competent programmers in the future. In this paper, we provide evidence that a careful incorporation of the concept of scoping into code tracing techniques is fundamental to achieving this successful student transition. To this end, we present a formalized pencil-and-paper code tracing strategy for CS1 called Visualized Scope Tracing (VST), with scoping as a key underlying theme that elegantly addresses code blocks, function stacks, recursive structures, pass-by-reference, arrays, pointers, and parallel code.Furthermore, we study the impact of our code tracing approach on CS1 students at a small liberal arts institution over a 10-year period. The goals of this work are twofold: describe how to easily (and naturally) integrate VST into any CS1 curricula; second, show demonstrable improvements on student learning using our technique. Our findings suggest that VST has a positive, long-lasting impact on their academic performance in CS2.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {137–143},
numpages = {7},
keywords = {computational thinking, cs1, scope, tracing, visualization},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3408877.3432434,
author = {Blanchard, Jeremiah and Gardner-McCune, Christina and Anthony, Lisa},
title = {Dual Modality Instruction &amp; Programming Environments: Student Usage &amp; Perceptions},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432434},
doi = {10.1145/3408877.3432434},
abstract = {Dual-modality blocks-text programming environments have shown promise in helping students learn programming and computational thinking. These environments link blocks-based visualizations to text-based representations, which are more typical of production languages. Since prior work shows that some students who learn in dual-modality environments outperform those who learn in text on assessments, we sought to understand specifically how students use dual-modality environments and what support these environments provide to the learning process. We analyzed survey responses and tool logs collected during a study at a large public university in a CS1 course (N=425). We found that students from all prior programming experience backgrounds made use of the ability to visualize code structures by using blocks. Students with prior experience in blocks or no prior experience said they felt the dual-modality instruction helped them understand code structure and meaning. As students progressed through the class, we found that they made more use of the blocks mode's reference palettes than to its drag-and-drop facilities or mode-switching features. By identifying how students interact with dual-modality tools and how they impact student understanding, this work provides guidance for classroom instructors.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {481–487},
numpages = {7},
keywords = {programming languages, novice programmers, dual-modality programming environments, computer science education, blocks-based programming environments, CS1},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3279720.3279749,
author = {Jormanainen, Ilkka},
title = {On computer science major students' motivation in a practically oriented robotics course},
year = {2018},
isbn = {9781450365352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3279720.3279749},
doi = {10.1145/3279720.3279749},
abstract = {Educational robotics is considered to motivate students to learn principles of computing and computational thinking in many contexts. In this paper, we present the first experiences from our recent multimodal robotics course, that was given to more than 100 computer science major students at the University of Eastern Finland. Preliminary results show, aligned with suggestions from the literature, that hands-on robotics exercises and the course project work motivated students. Furthermore, results indicate that robotics would have a stronger role in our computer science curriculum.},
booktitle = {Proceedings of the 18th Koli Calling International Conference on Computing Education Research},
articleno = {29},
numpages = {2},
keywords = {students' motivation, education, computer science curriculum, Robotics, Lego Mindstorms, Arduino},
location = {Koli, Finland},
series = {Koli Calling '18}
}

@inproceedings{10.1145/3686852.3687080,
author = {Fall, Abdou and Popoola, Saheed},
title = {Educators' Perspective on the role of Computational Technology in K-12 Education},
year = {2024},
isbn = {9798400711060},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3686852.3687080},
doi = {10.1145/3686852.3687080},
abstract = {The use of computational technology is common in K-12 education. Existing work on the use of technology have often focused on experiments without considering the educator’s viewpoint. Yet, educators are those who deal directly with the student and introduce these technology to the student. This paper examines the perception of educators on the use of computational technology in the classroom. We conducted a qualitative study consisting of semi-structured interviews and open-ended questions with K-12 educators. The data from the study was then analysed to extract thematic group perceptions on the use of technology in the classroom. The results show that most educators believe that technology enhances learning in general even though there may be some aspects of learning that are inhibited by technology. Furthermore, the solutions offered by computational technology are instrumental in solving business, health, and societal problems. These industry relies on the problem-solving capacity of learners from the school system who possess computational skills. Hence, the educators recommend that students should be introduced to computational technology as early as possible because the knowledge of computational technology is essential for the students’ future careers.},
booktitle = {Proceedings of the 25th Annual Conference on Information Technology Education},
pages = {134–137},
numpages = {4},
keywords = {K-12, educators, learning process, technology},
location = {El Paso, TX, USA},
series = {SIGITE '24}
}

@inproceedings{10.1145/3078072.3079740,
author = {Papavlasopoulou, Sofia and Sharma, Kshitij and Giannakos, Michail and Jaccheri, Letizia},
title = {Using Eye-Tracking to Unveil Differences Between Kids and Teens in Coding Activities},
year = {2017},
isbn = {9781450349215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3078072.3079740},
doi = {10.1145/3078072.3079740},
abstract = {Computational thinking and coding is gradually becoming an important part of K-12 education. Most parents, policy makers, teachers, and industrial stakeholders want their children to attain computational thinking and coding competences, since learning how to code is emerging as an important skill for the 21st century. Currently, educators are leveraging a variety of technological tools and programming environments, which can provide challenging and dynamic coding experiences. Despite the growing research on the design of coding experiences for children, it is still difficult to say how children of different ages learn to code, and to cite differences in their task-based behaviour. This study uses eye-tracking data from 44 children (here divided into "kids" [age 8-12] and "teens" [age 13-17]) to understand the learning process of coding in a deeper way, and the role of gaze in the learning gain and the different age groups. The results show that kids are more interested in the appearance of the characters, while teens exhibit more hypothesis-testing behaviour in relation to the code. In terms of collaboration, teens spent more time overall performing the task than did kids (higher similarity gaze). Our results suggest that eye-tracking data can successfully reveal how children of different ages learn to code.},
booktitle = {Proceedings of the 2017 Conference on Interaction Design and Children},
pages = {171–181},
numpages = {11},
keywords = {teens, maker movement, kids, eye-tracking, coding},
location = {Stanford, California, USA},
series = {IDC '17}
}

@inproceedings{10.1145/3290605.3300744,
author = {Koushik, Varsha and Kane, Shaun K.},
title = {"It Broadens My Mind": Empowering People with Cognitive Disabilities through Computing Education},
year = {2019},
isbn = {9781450359702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3290605.3300744},
doi = {10.1145/3290605.3300744},
abstract = {Computer science education is widely viewed as a path to empowerment for young people, potentially leading to higher education, careers, and development of computational thinking skills. However, few resources exist for people with cognitive disabilities to learn computer science. In this paper, we document our observations of a successful program in which young adults with cognitive disabilities are trained in computing concepts. Through field observations and interviews, we identify instructional strategies used by this group, accessibility challenges encountered by this group, and how instructors and students leverage peer learning to support technical education. Our findings lead to guidelines for developing tools and curricula to support young adults with cognitive disabilities in learning computer science.},
booktitle = {Proceedings of the 2019 CHI Conference on Human Factors in Computing Systems},
pages = {1–12},
numpages = {12},
keywords = {computer science education, cognitive disability, accessibility},
location = {Glasgow, Scotland Uk},
series = {CHI '19}
}

@inproceedings{10.1145/3291279.3341199,
author = {Ariga, Taeko},
title = {Can We Use Swift as a First Language to Teach Programming to Non-majors?},
year = {2019},
isbn = {9781450361859},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291279.3341199},
doi = {10.1145/3291279.3341199},
abstract = {This study considers whether the Swift language can be used as a first language for teaching introductory programming. Our department targets the creation of digital contents and media studies. Students are concerned with both digital media contents and computer technology. Learning programming is important for our students to foster computational thinking and utilize programming for their study and creation. We conducted two courses to teach programming to beginners using Java and Swing. The poster presents the contents of both courses, results of examinations, and consideration of the results. Although our pilot study shows that Swift + Xcode may not be adequate for beginners, we would like to explore the feasibility of learning iOS development at the same time as basic programming concepts without the prerequisite of programming experience.},
booktitle = {Proceedings of the 2019 ACM Conference on International Computing Education Research},
pages = {289},
numpages = {1},
keywords = {swift, programming for non-majors, java, introductory programming},
location = {Toronto ON, Canada},
series = {ICER '19}
}

@inproceedings{10.1145/3033701.3033745,
author = {Barata, Pablo Eduardo Cabral and Mota, Marcelle Pereira},
title = {An Initial Study on Meanings Facets in IvProg programs},
year = {2016},
isbn = {9781450352352},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3033701.3033745},
doi = {10.1145/3033701.3033745},
abstract = {This paper reports an initial study about meaning facets of programs constructed with IvProg tool. These facets were developed based on the PoliFacets model, a model to support the development of meaning facets with the purpose to support the teaching of computational thinking acquisition. In this way, an evaluation of the facets was performed with novice at computing undergraduate courses, indicating that they were fulfilling part of their goals.},
booktitle = {Proceedings of the 15th Brazilian Symposium on Human Factors in Computing Systems},
articleno = {43},
numpages = {4},
keywords = {metacommunication, facets, computational thinking acquisition, PoliFacets, IvProg},
location = {S\~{a}o Paulo, Brazil},
series = {IHC '16}
}

@inproceedings{10.1145/3341525.3387415,
author = {Leifheit, Luzia and Tsarava, Katerina and Ninaus, Manuel and Ostermann, Klaus and Golle, Jessika and Trautwein, Ulrich and Moeller, Korbinian},
title = {SCAPA: Development of a Questionnaire Assessing Self-Concept and Attitudes Toward Programming},
year = {2020},
isbn = {9781450368742},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341525.3387415},
doi = {10.1145/3341525.3387415},
abstract = {There is a constantly growing number of initiatives asserting the relevance of programming already in primary education and offering respective interventions with the goal to foster interest in and positive attitudes toward programming. To evaluate to what extent this goal is achieved, assessing students' attitudes toward programming reliably is indispensable. However, there still is a need for validated instruments for assessing this in elementary school students. This seems particularly relevant as self-concept and attitudes toward a school subject were repeatedly observed to be significant predictors of learning motivation and achievement. The newly developed Self-Concept and Attitude toward Programming Assessment (SCAPA) is based on existing instruments for assessing students' self-concept and attitude toward mathematics. SCAPA measures aspects of students' self-concept and attitudes toward programming on seven scales: i) self-reported previous programming experience and understanding, ii) self-concept, iii) intrinsic value belief, iv) attainment value belief, v) utility value belief, vi) cost belief, and vii) compliance and persistence. We administered SCAPA to 197 elementary school students between seven and ten years of age in the context of an evaluation of a computational thinking intervention. Data were analyzed for reliability (i.e., internal consistency on item and scale level) and construct validity (by means of confirmatory factor analysis). Results indicated good reliability for all scales except for the self-reported previous programming experience and understanding scale. Overall, these results reflect SCAPA's suitability for assessing different aspects of elementary school students' self-concept and attitudes toward programming.},
booktitle = {Proceedings of the 2020 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {138–144},
numpages = {7},
keywords = {primary education, instrument development, computing education, computer science education, assessment, K-12 education},
location = {Trondheim, Norway},
series = {ITiCSE '20}
}

@inproceedings{10.1145/3287324.3293772,
author = {Floyd, Steven Paul},
title = {Historical High School Computer Science Curriculum and Current K-12 Initiatives},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293772},
doi = {10.1145/3287324.3293772},
abstract = {It's an exciting time in computer science education on the K-12 landscape. Educational jurisdictions around the world are incorporating computer science concepts, as well as related computational thinking components, into their mandatory, K-12 curriculum. As we develop and implement curriculum initiatives with an eye on the future and the 21st century learner and citizen, what wisdom can we gleam from the past? In Ontario, Canada computer science education dates back to 1966 with the release of the Ministry of Education's Data Processing course that included a number of computer science and computer programming concepts and ideas. The document also frames computer education within the context of an emerging field and highlights the importance of students developing appropriate computer skills in order to thrive in the labor market and society. While we often consider computer science curriculum initiatives in K-12 education nascent, are important historical policy and initiatives being overlooked? This lightning talk shares preliminary findings from an analysis of five historical computer science curriculum documents. Grounded theory was used to discover emergent themes and concepts apparent in historical documents including ethical computing, the role of technology in society, and the cross-curricular nature of computer science skills. These preliminary findings inform the discussion surrounding the use of historical curriculum to establish best practice in existing curriculum and policy development.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1287},
numpages = {1},
keywords = {k-12 education, historical analysis, educational policy, curriculum, computing, computer science, computer programming, computational thinking, 21st century learning},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2538862.2544316,
author = {Roberts, Michele S.},
title = {Data-driven broadened participation (abstract only)},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2544316},
doi = {10.1145/2538862.2544316},
abstract = {While programming has long been utilized as a recruitment path into computer science, data analysis as a recruitment path is relatively under-explored. Through a series of modular curriculum units developed in computational thinking, the potential impact of explorations in data analysis to impact teacher and student affect toward and interest in computer science is being investigated. Developed units include exercises such as statistically determining the author of selected text passages, modeling roller coaster simulations, solving crime mysteries and controlling zombie contagions. Computational thinking modules have been delivered in a CS Pilot course, as well as in K-12 outreach programs in non-computing courses (STEM and non-STEM, including classes in English literature, sociology, biology, physics and math). Initial results show significant and promising opportunities to utilize data analysis to create computing interest in a broadened population of students and teachers, extending the impact of computational thinking into a variety of subject domains.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {724},
numpages = {1},
keywords = {data, computational thinking, broadening participation},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/3401956.3404238,
author = {Bergner, Yoav and Damast, Deborah and Romita, Allegra and Smock, Anne Marie Robson},
title = {Movement Computing Education for Middle Grades},
year = {2020},
isbn = {9781450375054},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3401956.3404238},
doi = {10.1145/3401956.3404238},
abstract = {This paper takes a theoretical approach to movement computing education for young learners, with a focus on middle grades (grades 6-8, ages 11-14). This age group is targeted as a lower bound because, while some elements of computational thinking may be available to still younger learners, there are abstractions involved in movement computation that pre-require a certain amount of formal operation, in the Piagetian sense. We outline a parallel foundation of key ideas in movement (specifically dance) and key ideas in computing (specifically data representations) at this age-appropriate level. We describe how these foundations might be laid down together early on so that they can later be integrated via the introduction of sensing and feedback technology. Concepts in movement and choreography are studied using words and bodies, as in traditional dance education, and later using computer simulations and motion capture. Data concepts are introduced first by appeal to general questions and later by specification to the movement of individual and collective joints and bodies.},
booktitle = {Proceedings of the 7th International Conference on Movement and Computing},
articleno = {19},
numpages = {5},
keywords = {motion capture, education, data science, dance analytics},
location = {Jersey City/Virtual, NJ, USA},
series = {MOCO '20}
}

@inproceedings{10.1145/3442188.3445914,
author = {Raji, Inioluwa Deborah and Scheuerman, Morgan Klaus and Amironesei, Razvan},
title = {You Can't Sit With Us: Exclusionary Pedagogy in AI Ethics Education},
year = {2021},
isbn = {9781450383097},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3442188.3445914},
doi = {10.1145/3442188.3445914},
abstract = {Given a growing concern about the lack of ethical consideration in the Artificial Intelligence (AI) field, many have begun to question how dominant approaches to the disciplinary education of computer science (CS)---and its implications for AI---has led to the current "ethics crisis". However, we claim that the current AI ethics education space relies on a form of "exclusionary pedagogy," where ethics is distilled for computational approaches, but there is no deeper epistemological engagement with other ways of knowing that would benefit ethical thinking or an acknowledgement of the limitations of uni-vocal computational thinking. This results in indifference, devaluation, and a lack of mutual support between CS and humanistic social science (HSS), elevating the myth of technologists as "ethical unicorns" that can do it all, though their disciplinary tools are ultimately limited. Through an analysis of computer science education literature and a review of college-level course syllabi in AI ethics, we discuss the limitations of the epistemological assumptions and hierarchies of knowledge which dictate current attempts at including ethics education in CS training and explore evidence for the practical mechanisms through which this exclusion occurs. We then propose a shift towards a substantively collaborative, holistic, and ethically generative pedagogy in AI education.},
booktitle = {Proceedings of the 2021 ACM Conference on Fairness, Accountability, and Transparency},
pages = {515–525},
numpages = {11},
location = {Virtual Event, Canada},
series = {FAccT '21}
}

@article{10.1145/3425711,
author = {Seo, Hyunjin and Altschwager, Darcey and Choi, Baek-young and Song, Sejun and Britton, Hannah and Ramaswamy, Megha and Schuster, Bernard and Ault, Marilyn and Ayinala, Kaushik and Zaman, Rafida and Tihen, Ben and Yenugu, Lohitha},
title = {Informal Technology Education for Women Transitioning from Incarceration},
year = {2021},
issue_date = {June 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {2},
url = {https://doi.org/10.1145/3425711},
doi = {10.1145/3425711},
abstract = {As society increasingly relies on digital technologies in many different aspects, those who lack relevant access and skills are lagging increasingly behind. Among the underserved groups disproportionately affected by the digital divide are women who are transitioning from incarceration and seeking to reenter the workforce outside the carceral system (women-in-transition). Women-in-transition rarely have been exposed to sound technology education, as they have generally been isolated from the digital environment while in incarceration. Furthermore, while women have become the fastest-growing segment of the incarcerated population in the United States in recent decades, prison education and reentry programs are still not well adjusted for them. Most programs are mainly designed for the dominant male population. Consequently, women-in-transition face significant post-incarceration challenges in accessing and using relevant digital technologies and thus have added difficulties in entering or reentering the workforce. Against this backdrop, our multi-disciplinary research team has conducted empirical research as part of technology education offered to women-in-transition in the Midwest. In this article, we report results from our interviews with 75 women-in-transition in the Midwest that were conducted to develop a tailored technology education program for the women. More than half of the participants in our study are women of color and face precarious housing and financial situations. Then, we discuss principles that we adopted in developing our education program for the marginalized women and participants’ feedback on the program. Our team launched in-person sessions with women-in-reentry at public libraries in February 2020 and had to move the sessions online in March due to COVID-19. Our research-informed educational program is designed primarily to support the women in enhancing their knowledge and comfort with technology and nurturing computational thinking. Our study shows that low self-efficacy and mental health challenges, as well as lack of resources for technology access and use, are some of the major issues that need to be addressed in supporting technology learning among women-in-transition. This research offers scholarly and practical implications for computing education for women-in-transition and other marginalized populations.},
journal = {ACM Trans. Comput. Educ.},
month = may,
articleno = {16},
numpages = {16},
keywords = {reentry, Informal technology education}
}

@inproceedings{10.1145/3328778.3372704,
author = {Gendreau Chakarov, Alexandra},
title = {Introducing Middle School Students to Programmable Sensor Technologies Through an Immersive Experience},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372704},
doi = {10.1145/3328778.3372704},
abstract = {Integrating computational thinking into middle school science classes through the use of programmable sensor technologies requires that students are familiar with the sensors and how the sensors can help them figure out the answers to their scientific questions. However current best practice in science education integrates science content and scientific practices (i.e. planning an investigation using the sensors) instead of teaching the practices first. In addition, the goal is to have the students recognize that the sensors would be useful for answering their current questions. To address this issue, I collaboratively designed a week long sensor immersion experience with middle school science teachers as part of a larger design based implementation research project that creates middle school science units that integrate computational thinking using these sensors. Through our observations and reflections with teachers, the necessity of a unit that introduces the students to the sensors became apparent. Working with the teachers, we developed a sensor immersion experience centered around the investigation of a classroom data display that illustrates information about the classroom environment using lights and sound. The data display was constructed using the programmable sensor technologies available to the students and the unit involved them creating and refining a model of how the classroom data display worked. This unit was implemented during the first three months of the 2019/2020 school year and preliminary results suggest that students have a better sense of the capabilities of the sensors and how they can help them in their scientific inquiry.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1428},
numpages = {1},
keywords = {sensors, middle school-science, micro:bit, computational-thinking},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3372782.3406276,
author = {Papamitsiou, Zacharoula and Giannakos, Michail and Simon, - and Luxton-Reilly, Andrew},
title = {Computing Education Research Landscape through an Analysis of Keywords},
year = {2020},
isbn = {9781450370929},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372782.3406276},
doi = {10.1145/3372782.3406276},
abstract = {Authors of academic papers are generally required to nominate several keywords that characterize the paper, but are rarely offered guidance on how to select those keywords. We analyzed the keywords in the past 15 years of selected computing education publications: the 1274 papers published in the proceedings of ICER and ITiCSE, including the ITiCSE working group reports. As well as the keywords assigned by the authors, we mined the abstracts of these papers to extract a separate list of keywords. Our work has two goals: to frame the thematic landscape of the field, using keywords that communicate the work conducted; and to detect differences between the human judgement and interpretation of keywords and the machine 'intelligence' on handling those keywords, with respect to the clusters of thematic topics identified in each case. The analysis shows that the field is dominated by learning approaches (e.g., active learning, collaborative learning), aspects of programming (e.g., debugging, misconceptions), computational thinking, feedback, and assessment, while other areas that have attracted attention include academic integrity (e.g., plagiarism) and diversity (e.g., female students, underrepresented groups). It was observed that the keywords chosen by authors are often too general to provide information about the paper (e.g., 'concerns', 'course', 'fun', 'justice'). We elaborate on the findings and begin a discussion on how authors can improve the communication of their research and make access to it more transparent.},
booktitle = {Proceedings of the 2020 ACM Conference on International Computing Education Research},
pages = {102–112},
numpages = {11},
keywords = {keywords, dominant themes, computing education, bibliometrics},
location = {Virtual Event, New Zealand},
series = {ICER '20}
}

@inproceedings{10.1145/3335595.3336289,
author = {Botella, Federico and Pe\~{n}alver, Antonio and Quesada-Mart\'{\i}nez, Manuel and Bermejo, Fulgencio and Borr\'{a}s, Fernando},
title = {Teaching the sequential programming concept using a robotic arm in an interactive museum},
year = {2019},
isbn = {9781450371766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3335595.3336289},
doi = {10.1145/3335595.3336289},
abstract = {Technology and Computer Science are increasingly present in today's education and teaching programming is not only restricted to students interested in Science, Technology, Engineering and Maths (STEM) disciplines, as computational thinking is useful in many day-to-day problems. In this paper we study how students of high school can put in practice transversal concepts by learning the sequential programming concept. We analyze their learning process by asking them to code a simple program that solves a concrete problem: perform simple and immersive tasks using a physical robot in an interactive museum. The experiment offers us some results that should be confirmed with more participants, but it seems that the ages from 13 to 15 years old are crucial to gain knowledge and skills to apply concepts of their studies on using sequential programming to interact with a robotic arm.},
booktitle = {Proceedings of the XX International Conference on Human Computer Interaction},
articleno = {32},
numpages = {4},
keywords = {sequential programming, science museum, robot arm, learning efficiency, interactive module},
location = {Donostia, Gipuzkoa, Spain},
series = {Interacci\'{o}n '19}
}

@inproceedings{10.1145/2858796.2858801,
author = {Giordano, Daniela and Maiorana, Francesco and Csizmadia, Andrew Paul and Marsden, Simon and Riedesel, Charles and Mishra, Shitanshu and Vinikienundefined, Lina},
title = {New Horizons in the Assessment of Computer Science at School and Beyond: Leveraging on the ViVA Platform},
year = {2015},
isbn = {9781450341462},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2858796.2858801},
doi = {10.1145/2858796.2858801},
abstract = {A revolution is taking place across Europe and worldwide in how we teach our children about computing, in primary and secondary school. Out goes ICT and how to use Microsoft Office; in comes coding and computer science. Assessment has a crucial role to play in this revolution. If teachers use low-quality assessment instruments we will end-up teaching the wrong subject; and viceversa. This paper reviews the state of the field, and makes concrete, achievable proposals for developing shared, high quality assessments for computer science. Central to this proposal is the collaborative platform VIVA (the Vilnius collaboratively coded and Validated computer science questions/tasks for Assess- ment). Two requirements are key to VIVA: 1) support for multiple competency frameworks, so that the contributors can meta-tag resources with respect to the framework they are most familiar with; and 2) support for crowdsourcing the validation of each question/task and its mapping to competencies. The use of a taxonomy of questions/tasks type that has been mapped to computational thinking concepts and to a competency framework is proposed. Some seed questions are already available in the online platform prototype, and various supporters have granted permission to use large questions banks. The design requirements of a full implementation of the VIVA platform for a modern and effective approach to assessment including support for digital badges, are outlined; and some preliminary results from a survey administered to the initial contributors to VIVA are presented.},
booktitle = {Proceedings of the 2015 ITiCSE on Working Group Reports},
pages = {117–147},
numpages = {31},
keywords = {repositories, questions, open badges, metadata, lifelong learning, learning progression, crowdsourcing, computational thinking, competency frameworks, assessment, activities},
location = {Vilnius, Lithuania},
series = {ITICSE-WGR '15}
}

@inproceedings{10.1145/3304221.3319750,
author = {Lodi, Michael},
title = {Does Studying CS Automatically Foster a Growth Mindset?},
year = {2019},
isbn = {9781450368957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3304221.3319750},
doi = {10.1145/3304221.3319750},
abstract = {Many arguments are used to advocate for the introduction of Computer Science (CS) / Computational Thinking / "coding" in K-12 education. Growth mindset theory (GM) is also becoming very popular among educators and researchers. Some claims stating that studying CS can foster a GM have emerged. However, educational research shows that transfer of competences is hard. Very little research has been conducted on the relationship between GM and CS learning, with conflicting results. We measured some indicators (e.g., mindset, computer science mindset) at the beginning and the end of a high school year in five different classes: three CS oriented, one Chemistry oriented, and one Transportation&amp;Logistics oriented. In one of the CS oriented classes, we did a very brief GM intervention. At the end of the school year, none of the classes showed a statistically significant change in their mindset. Interestingly, non-CS oriented classes showed a significant decrease in their computer science growth mindset. In the intervention class, students suggested, to stimulate a GM, the need for activities that are more creative, engaging, and related to the real world and their interests.},
booktitle = {Proceedings of the 2019 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {147–153},
numpages = {7},
keywords = {transfer, high school, growth mindset, computer science mindset},
location = {Aberdeen, Scotland Uk},
series = {ITiCSE '19}
}

@inproceedings{10.1145/3328778.3366922,
author = {Cao, Lijuan and Rorrer, Audrey and Pugalee, David and Maher, Mary Lou and Dorodchi, Mohsen and Frye, David and Barnes, Tiffany and Wiebe, Eric},
title = {Work in Progress Report: A STEM EcoSystem Approach to CS/CT for All in a Middle School},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366922},
doi = {10.1145/3328778.3366922},
abstract = {This project is a Research to Practice Partnership (RPP) between two middle schools and two universities. It focuses on investigating problems and on identifying solutions around increasing participation and interest in computer science (CS). We aim to do this by identifying, experimenting with, and fine-tuning methods to help students develop computational thinking (CT) skills. The research employs a STEM ecosystem model, which facilitates a support structure that aims to mitigate barriers and impact students as they progress in STEM areas. While this RPP is still a work in progress, we present data from the first year of our collaboration with one of the middle schools. While the research questions guiding this RPP are intended to be iterative and revised annually, year one data provides perspectives on (1) barriers to developing a STEM ecosystem that supports CS/CT for every student through integration into science, math, and language arts courses, (2) the factors or interventions needed for the development of a CS/CT focused ecosystem that supports everyone in the school, (3) the indicators of success for a CS/CT focused STEM ecosystem in a school, and (4) how the ecosystem prepares and engages all students for CS/CT work in high school. Year one data is discussed in terms of the STEM ecosystem framework and in how it will guide the next steps in this partnership. This project contributes to the understanding of how to prepare future generations for participation in a workforce where knowledge of the foundations of CS/CT is integral to success.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {999–1004},
numpages = {6},
keywords = {stem ecosystem, research to practice partnership, k-12 outreach, broadening participation},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3626253.3633424,
author = {Sussman, Alan and Prasad, Sushil and Weems, Charles and Ghafoor, Sheikh and Vaidyanathan, Ramachandran},
title = {Integrating Parallel and Distributed Computing in Early Computing Classes},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3633424},
doi = {10.1145/3626253.3633424},
abstract = {Parallel and distributed computing (PDC) has become pervasive in all aspects of computing, so it is essential that students include parallelism and distribution in the computational thinking that they apply to problem solving, from the very beginning of their computing education. With all computing devices that students use currently having multiple cores as well as a GPU in many cases, many students' favorite applications use multiple cores and/or distributed processors. However, we are still teaching them to solve problems using only sequential thinking. Why?This hands-on workshop will demonstrate how easy it is to open students' eyes to exploiting concurrency in problem solving. You will participate in unplugged activities that will help students to recognize examples of PDC concepts and concurrency in the world around them. You will learn how freely available libraries can be used to exploit parallelism using shared memory parallel programming, using both plugged and unplugged activities that are usable in a classroom setting.No equipment or prior experience is required, but a laptop that can run C++, Java, and Python is recommended for following along with some code examples. The activities and discussion models have been used successfully to teach PDC concepts in early computing courses and will be available after the workshop. Participants will receive a stipend of 400 to defray their cost of registration and one-night hotel stay. The CDER center will also have a booth in the exhibition hall for additional support.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1906},
numpages = {1},
keywords = {computing education, early computing class, hpc education, shared memory parallel programming, pdc education},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@article{10.5555/3205191.3205206,
author = {Fine, Benjamin T.},
title = {Algorithm impossible: a CS1 algorithm design exercise},
year = {2018},
issue_date = {June 2018},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {33},
number = {6},
issn = {1937-4771},
abstract = {Along with the skill of programming, a primary objective of a CS1 level course is to promote computational thinking and algorithm design. This lighting talk is addressing an in-class exercise that I have been developing and using for the past three semesters in my introductory Computer Science courses. The aim of this assignment is three-fold; (1) to have students practice their skill of algorithm design, (2) understand the importance and usefulness of a well-written algorithm, and (3) to experience how different students may approach the same problem.},
journal = {J. Comput. Sci. Coll.},
month = jun,
pages = {135–136},
numpages = {2}
}